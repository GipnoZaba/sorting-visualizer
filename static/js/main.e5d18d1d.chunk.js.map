{"version":3,"sources":["app/models/visualizerOptions.ts","app/common/utils/mathHelpers.ts","app/models/sortable.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","app/stores/visualizerStore.ts","app/stores/rootStore.ts","features/Visualizer.tsx","features/VisualizerContainer.tsx","features/VisualizerInfo.tsx","features/VisualizerCard.tsx","features/VisualizersCarousel.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithms","AnimationTypes","randomNumber","from","to","Math","round","random","SortableNumber","value","color","this","other","getValue","toString","data","title","class","description","timeComplexity","spaceComplexity","BubbleSort","type","array","slice","animations","i","length","j","push","Comparison","index1","index2","isGreaterThan","tmp","Swap","InsertionSort","key","leftElementIndex","isLessThan","Move","Set","element","VisualizerStore","rootStore","elementsCount","animationSpeed","bubbleSort","insertionSort","bubbleSortAnimations","insertionSortAnimations","bubbleSortIsAnimating","insertionSortIsAnimating","getAlgorithm","algorithm","getArray","bubbleSortArray","insertionSortArray","getAnimations","setAnimations","isAnimating","triggerIsAnimating","animation","forEach","x","count","observable","generateSortableNumbers","action","sortingAlgorithm","sort","setInterval","shift","animate","configure","enforceActions","RootStoreContext","createContext","visualizerStore","observer","useContext","triggerSorting","className","onClick","map","index","style","width","backgroundColor","getColor","src","alt","naturalSlideWidth","naturalSlideHeight","totalSlides","infinite","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e5d18d1d.chunk.js","sourcesContent":["import { ISortable } from \"./sortable\";\r\n\r\nexport enum Algorithms {\r\n  BubbleSort,\r\n  InsertionSort\r\n}\r\n\r\nexport interface IAnimation {\r\n  type: AnimationTypes;\r\n  index1: number;\r\n  index2: number;\r\n  element?: ISortable;\r\n}\r\n\r\nexport enum AnimationTypes {\r\n  Swap,\r\n  Comparison,\r\n  Move,\r\n  Set\r\n}\r\n","const clamp = (min: number, max: number, t: number) => {\r\n  return Math.max(max, Math.min(min, t));\r\n};\r\n\r\nconst randomNumber = (from: number, to: number) =>\r\n  Math.round(Math.random() * (to - from) + from);\r\n\r\nconst remap = (\r\n  minMaxIn: [number, number],\r\n  minMaxOut: [number, number],\r\n  value: number\r\n) =>  minMaxOut[0] + ((value - minMaxIn[0]) * (minMaxOut[1] - minMaxOut[0])) / (minMaxIn[1] - minMaxIn[0]);\r\n\r\nexport { clamp, randomNumber, remap };\r\n","import { clamp, remap } from \"../common/utils/mathHelpers\";\r\n\r\nexport interface ISortable {\r\n  isGreaterThan(other: ISortable): boolean;\r\n  isLessThan(other: ISortable): boolean;\r\n  getValue(): number;\r\n  getColor(): string;\r\n  color: string;\r\n  toString(): string;\r\n}\r\n\r\nexport class SortableNumber implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = value;\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.color}, 100%, 50%)`;\r\n  }\r\n  color = \"100\";\r\n\r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\nexport class SortableColor implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = clamp(0, 360, value);\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.getValue()}, 100%, 50%)`;\r\n  }\r\n  color = \"0\";\r\n  toString() {\r\n    return `hsl(${this.value.toString()}, 100%, 50%)`;\r\n  }\r\n}\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Bubble Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `Bubble sort, sometimes referred to as sinking sort,\r\n                is a simple sorting algorithm that repeatedly steps\r\n                through the list, compares adjacent elements and swaps\r\n                them if they are in the wrong order. The pass through\r\n                the list is repeated until the list is sorted.`,\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass BubbleSort implements ISortingAlgorithm {\r\n  type = Algorithms.BubbleSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      for (let j = 0; j < array.length - 1 - i; j++) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: j,\r\n          index2: j + 1\r\n        });\r\n\r\n        if (array[j].isGreaterThan(array[j + 1])) {\r\n          let tmp = array[j];\r\n          array[j] = array[j + 1];\r\n          array[j + 1] = tmp;\r\n\r\n          animations.push({\r\n            type: AnimationTypes.Swap,\r\n            index1: j,\r\n            index2: j + 1\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default BubbleSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../app/models/visualizerOptions\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Insertion sort\",\r\n  class: \"Comparison sort\",\r\n  description: ``,\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass InsertionSort implements ISortingAlgorithm {\r\n  type = Algorithms.InsertionSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n      let key = array[i];\r\n      let leftElementIndex = i - 1;\r\n\r\n      while (leftElementIndex >= 0 && key.isLessThan(array[leftElementIndex])) {\r\n        array[leftElementIndex + 1] = array[leftElementIndex];\r\n\r\n        animations.push({\r\n          type: AnimationTypes.Move,\r\n          index1: leftElementIndex,\r\n          index2: leftElementIndex + 1\r\n        });\r\n\r\n        leftElementIndex--;\r\n      }\r\n\r\n      array[leftElementIndex + 1] = key;\r\n\r\n      animations.push({\r\n        type: AnimationTypes.Set,\r\n        index1: leftElementIndex + 1,\r\n        index2: leftElementIndex + 1,\r\n        element: key\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default InsertionSort;\r\n","import { RootStore } from \"./rootStore\";\r\nimport { IStore } from \"./store\";\r\nimport { ISortable, SortableNumber } from \"../models/sortable\";\r\nimport { action, observable } from \"mobx\";\r\nimport { ISortingAlgorithm } from \"../models/sortingAlgorithm\";\r\nimport BubbleSort from \"../../algorithms/bubbleSort\";\r\nimport InsertionSort from \"../../algorithms/insertionSort\";\r\nimport { randomNumber } from \"../common/utils/mathHelpers\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../models/visualizerOptions\";\r\n\r\nexport default class VisualizerStore implements IStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  elementsCount = 100;\r\n  animationSpeed = 10;\r\n\r\n  bubbleSort: ISortingAlgorithm = new BubbleSort();\r\n  insertionSort: ISortingAlgorithm = new InsertionSort();\r\n\r\n  @observable bubbleSortArray = this.generateSortableNumbers(\r\n    5,\r\n    100,\r\n    this.elementsCount\r\n  );\r\n  @observable insertionSortArray = this.generateSortableNumbers(\r\n    5,\r\n    100,\r\n    this.elementsCount\r\n  );\r\n\r\n  bubbleSortAnimations: IAnimation[] = [];\r\n  insertionSortAnimations: IAnimation[] = [];\r\n\r\n  bubbleSortIsAnimating = false;\r\n  insertionSortIsAnimating = false;\r\n\r\n  @action triggerSorting = (algorithm: Algorithms) => {\r\n    this.triggerIsAnimating(algorithm);\r\n\r\n    if (this.getAnimations(algorithm).length === 0) {\r\n      let sortingAlgorithm = this.getAlgorithm(algorithm);\r\n      let array = this.getArray(algorithm);\r\n      let animations = this.setAnimations(\r\n        algorithm,\r\n        sortingAlgorithm.sort(array)\r\n      );\r\n\r\n      setInterval(() => {\r\n        if (this.isAnimating(algorithm)) {\r\n          let animation = animations.shift();\r\n          if (animation) {\r\n            this.animate(animation, array);\r\n          }\r\n        }\r\n      }, this.animationSpeed);\r\n    }\r\n  };\r\n\r\n  @action animate(animation: IAnimation, array: ISortable[]) {\r\n    array.forEach(x => (x.color = \"100\"));\r\n    switch (animation.type) {\r\n      case AnimationTypes.Comparison:\r\n        break;\r\n      case AnimationTypes.Swap:\r\n        let tmp = array[animation.index1];\r\n        array[animation.index1] = array[animation.index2];\r\n        array[animation.index2] = tmp;\r\n        array[animation.index2].color = \"0\";\r\n        break;\r\n      case AnimationTypes.Move:\r\n        array[animation.index2] = array[animation.index1];\r\n        array[animation.index2].color = \"200\";\r\n        break;\r\n      case AnimationTypes.Set:\r\n        if (animation.element) {\r\n          array[animation.index2] = animation.element;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  @action generateSortableNumbers(\r\n    from: number,\r\n    to: number,\r\n    count: number\r\n  ): ISortable[] {\r\n    let array: ISortable[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      array.push(new SortableNumber(randomNumber(from, to)));\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  getAlgorithm = (algorithm: Algorithms): ISortingAlgorithm => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        return this.bubbleSort;\r\n      case Algorithms.InsertionSort:\r\n        return this.insertionSort;\r\n    }\r\n  };\r\n\r\n  getArray = (algorithm: Algorithms): ISortable[] => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        return this.bubbleSortArray;\r\n      case Algorithms.InsertionSort:\r\n        return this.insertionSortArray;\r\n    }\r\n  };\r\n\r\n  getAnimations = (algorithm: Algorithms): IAnimation[] => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        return this.bubbleSortAnimations;\r\n      case Algorithms.InsertionSort:\r\n        return this.insertionSortAnimations;\r\n    }\r\n  };\r\n\r\n  setAnimations = (\r\n    algorithm: Algorithms,\r\n    animations: IAnimation[]\r\n  ): IAnimation[] => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        this.bubbleSortAnimations = animations;\r\n        return this.bubbleSortAnimations;\r\n      case Algorithms.InsertionSort:\r\n        this.insertionSortAnimations = animations;\r\n        return this.insertionSortAnimations;\r\n    }\r\n  };\r\n\r\n  isAnimating = (algorithm: Algorithms): boolean => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        return this.bubbleSortIsAnimating;\r\n      case Algorithms.InsertionSort:\r\n        return this.insertionSortIsAnimating;\r\n    }\r\n  };\r\n\r\n  triggerIsAnimating = (algorithm: Algorithms) => {\r\n    switch (algorithm) {\r\n      case Algorithms.BubbleSort:\r\n        this.bubbleSortIsAnimating = !this.bubbleSortIsAnimating;\r\n        break;\r\n      case Algorithms.InsertionSort:\r\n        this.insertionSortIsAnimating = !this.insertionSortIsAnimating;\r\n        break;\r\n    }\r\n  };\r\n}\r\n","import { createContext } from \"react\";\r\nimport { configure } from \"mobx\";\r\nimport { IStore } from \"./store\";\r\nimport VisualizerStore from \"./visualizerStore\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore implements IStore {\r\n  visualizerStore: VisualizerStore;\r\n\r\n  constructor() {\r\n    this.visualizerStore = new VisualizerStore(this);\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\n\r\nconst Visualizer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { triggerSorting, getArray } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div\r\n      className=\"visualizer-window\"\r\n      onClick={() => triggerSorting(algorithm.type)}\r\n    >\r\n      <div className=\"visualizer bars-horizontal\">\r\n        {getArray(algorithm.type).map((element, index) => {\r\n          return (\r\n            <div\r\n              className=\"visualizer-bar blue\"\r\n              key={index}\r\n              style={{\r\n                width: `${element.getValue()}%`,\r\n                backgroundColor: `${element.getColor()}`\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Visualizer);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport Visualizer from \"./Visualizer\";\r\n\r\nconst VisualizerContainer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  return (\r\n    <div className=\"vizualizer-container\">\r\n      <Visualizer algorithm={algorithm} />\r\n      <div className=\"array-types\">\r\n        <ul>\r\n          <li>\r\n            <img\r\n              src=\"https://res.cloudinary.com/john-mantas/image/upload/v1537302064/codepen/delicious-apples/green-apple2.png\"\r\n              alt=\"green apple\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <img\r\n              src=\"https://res.cloudinary.com/john-mantas/image/upload/v1537303532/codepen/delicious-apples/half-apple.png\"\r\n              alt=\"half apple\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <img\r\n              src=\"https://res.cloudinary.com/john-mantas/image/upload/v1537303160/codepen/delicious-apples/green-apple-flipped.png\"\r\n              alt=\"green apple\"\r\n            />\r\n          </li>\r\n          <li>\r\n            <img\r\n              src=\"https://res.cloudinary.com/john-mantas/image/upload/v1537303708/codepen/delicious-apples/apple-top.png\"\r\n              alt=\"apple top\"\r\n            />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerContainer);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\n\r\nconst VisualizerInfo: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  return (\r\n    <div>\r\n      <div className=\"title\">\r\n        <h1>{algorithm.data.title}</h1>\r\n        <span>{algorithm.data.class}</span>\r\n      </div>\r\n      <div className=\"info-tab\">\r\n        <h3>Description</h3>\r\n        <p>{algorithm.data.description}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerInfo);\r\n\r\n/*\r\n<ul>\r\n          <li>Apples are nutricious</li>\r\n          <li>Apples may be good for weight loss</li>\r\n          <li>Apples may be good for bone health</li>\r\n          <li>They're linked to a lowest risk of diabetes</li>\r\n        </ul>\r\n*/\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport VisualizerContainer from \"./VisualizerContainer\";\r\nimport VisualizerInfo from \"./VisualizerInfo\";\r\n\r\nconst VisualizerCard: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  return (\r\n    <section className=\"vizualizer-card\">\r\n      <VisualizerContainer algorithm={algorithm} />\r\n      <VisualizerInfo algorithm={algorithm} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerCard);\r\n\r\n/*\r\n\r\n*/\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport {\r\n  CarouselProvider,\r\n  Slider,\r\n  Slide,\r\n  ButtonBack,\r\n  ButtonNext\r\n} from \"pure-react-carousel\";\r\nimport VisualizerCard from \"./VisualizerCard\";\r\n\r\nconst VisualizersCarousel = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { bubbleSort, insertionSort } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <CarouselProvider\r\n      naturalSlideWidth={16}\r\n      naturalSlideHeight={10}\r\n      totalSlides={3}\r\n      infinite\r\n    >\r\n      <Slider>\r\n        <Slide index={0}>\r\n          <VisualizerCard algorithm={bubbleSort} />\r\n        </Slide>\r\n        <Slide index={1}>\r\n          <VisualizerCard algorithm={insertionSort} />\r\n        </Slide>\r\n        <Slide index={2}>\r\n          <VisualizerCard algorithm={bubbleSort} />\r\n        </Slide>\r\n      </Slider>\r\n      <div className=\"carousel-btn back\">\r\n        <ButtonBack>\r\n          <i className=\"fas fa-arrow-left fa-2x\"></i>\r\n        </ButtonBack>\r\n      </div>\r\n      <div className=\"carousel-btn next\">\r\n        <ButtonNext>\r\n          <i className=\"fas fa-arrow-right fa-2x\"></i>\r\n        </ButtonNext>\r\n      </div>\r\n    </CarouselProvider>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizersCarousel);\r\n","import React from \"react\";\nimport VisualizersCarousel from \"../../features/VisualizersCarousel\";\nimport { observer } from \"mobx-react-lite\";\n\nconst App = () => {\n  return (\n    <div>\n      <VisualizersCarousel />\n    </div>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/styling/styles.scss';\nimport './app/styling/visualizer.scss';\nimport 'pure-react-carousel/dist/react-carousel.es.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}