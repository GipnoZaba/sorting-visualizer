{"version":3,"sources":["app/models/sortable.ts","algorithms/bubbleSort.ts","app/stores/visualizerStore.ts","app/stores/rootStore.ts","features/VisualizationCard.tsx","features/Visualizations.tsx","features/SortingVisualizator.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["SortableNumber","value","index","this","other","getValue","toString","BubbleSort","array","algorithmStep","i","length","j","isGreaterThan","tmp","swapped1","swapped2","slice","algorithmIterator","initArray","nextStep","next","done","undefined","observable","action","push","VisualizerStore","rootStore","originalArray","bubbleAlgorithm","generateSortableNumbers","from","to","count","Math","round","random","algorithm","setInterval","step","configure","enforceActions","RootStoreContext","createContext","visualizerStore","observer","startAlgorithm","useContext","className","onClick","map","element","key","style","height","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2d506579.chunk.js","sourcesContent":["import { clamp } from \"../common/utils/mathHelpers\";\r\n\r\nexport interface ISortable {\r\n  index: number;\r\n  isGreaterThan(other: ISortable): boolean;\r\n  getValue(): number;\r\n  getColor(): string;\r\n  toString(): string;\r\n}\r\n\r\nexport class SortableNumber implements ISortable {\r\n  value: number;\r\n  index: number;\r\n\r\n  constructor(value: number, index: number = -1) {\r\n    this.value = value;\r\n    this.index = index;\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.getValue()}, 100%, 50%)`;\r\n  }\r\n\r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\nexport class SortableColor implements ISortable {\r\n  value: number;\r\n  index: number;\r\n\r\n  constructor(value: number, index: number = -1) {\r\n    this.value = clamp(0, 360, value);\r\n    this.index = index;\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.getValue()}, 100%, 50%)`;\r\n  }\r\n\r\n  toString() {\r\n    return `hsl(${this.value.toString()}, 100%, 50%)`;\r\n  }\r\n}\r\n","import { ISortingAlgortihm } from \"./sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport { observable, action } from \"mobx\";\r\n\r\nclass BubbleSort implements ISortingAlgortihm {\r\n  @observable array: ISortable[] = [];\r\n  algorithmIterator: Generator<\r\n    { swapped1: ISortable; swapped2: ISortable; array: ISortable[] },\r\n    { swapped1: null; swapped2: null; array: ISortable[] },\r\n    unknown\r\n  >;\r\n  constructor(array: ISortable[]) {\r\n    this.initArray(array);\r\n\r\n    function* algorithmStep(array: ISortable[]) {\r\n      for (let i = 0; i < array.length; i++) {\r\n        for (let j = 0; j < array.length - 1 - i; j++) {\r\n          if (array[j].isGreaterThan(array[j + 1])) {\r\n            let tmp = array[j];\r\n\r\n            array[j] = array[j + 1];\r\n            array[j].index = j;\r\n\r\n            array[j + 1] = tmp;\r\n            array[j + 1].index = j + 1;\r\n            yield {\r\n              swapped1: array[j + 1],\r\n              swapped2: array[j],\r\n              array: array.slice()\r\n            };\r\n          }\r\n        }\r\n      }\r\n      return { swapped1: null, swapped2: null, array: array.slice() };\r\n    }\r\n    this.algorithmIterator = algorithmStep(array);\r\n  }\r\n\r\n  @action step() {\r\n    const nextStep = this.algorithmIterator.next();\r\n    if (!nextStep.done) {\r\n      this.array = nextStep.value.array;\r\n    }\r\n\r\n    return {\r\n      swapped1: nextStep.done ? null : nextStep.value.swapped1,\r\n      swapped2: nextStep.done ? null : nextStep.value.swapped2,\r\n      array: nextStep.done ? null : nextStep.value.array,\r\n      done: nextStep.done === undefined ? true : nextStep.done\r\n    };\r\n  }\r\n\r\n  @action initArray = (array: ISortable[]) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n      array[i].index = i;\r\n      this.array.push(array[i]);\r\n    }\r\n  };\r\n}\r\n\r\nexport default BubbleSort;\r\n","import { RootStore } from \"./rootStore\";\r\nimport { IStore } from \"./store\";\r\nimport { ISortable, SortableNumber } from \"../models/sortable\";\r\nimport { observable, action } from \"mobx\";\r\nimport { ISortingAlgortihm } from \"../../algorithms/sortingAlgorithm\";\r\nimport BubbleSort from \"../../algorithms/bubbleSort\";\r\n\r\nexport default class VisualizerStore implements IStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  originalArray: ISortable[] | null = null;\r\n  bubbleAlgorithm: ISortingAlgortihm = new BubbleSort(\r\n    this.generateSortableNumbers(10, 200, 100)\r\n  );\r\n\r\n  @action startAlgorithm = (algorithm: ISortingAlgortihm) => {\r\n    setInterval(() => algorithm.step(), 10);\r\n  };\r\n\r\n  @action generateSortableNumbers(\r\n    from: number,\r\n    to: number,\r\n    count: number\r\n  ): ISortable[] {\r\n    let array: ISortable[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      array.push(\r\n        new SortableNumber(Math.round(Math.random() * (to - from) + from))\r\n      );\r\n    }\r\n\r\n    return array;\r\n  }\r\n}\r\n","import { createContext } from \"react\";\r\nimport { configure } from \"mobx\";\r\nimport { IStore } from \"./store\";\r\nimport VisualizerStore from \"./visualizerStore\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore implements IStore {\r\n  visualizerStore: VisualizerStore;\r\n\r\n  constructor() {\r\n    this.visualizerStore = new VisualizerStore(this);\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport { ISortingAlgortihm } from \"../algorithms/sortingAlgorithm\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\n\r\nconst VisualizationCard: React.FC<{ algorithm: ISortingAlgortihm }> = ({\r\n  algorithm\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { startAlgorithm } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div\r\n      className=\"visualisations-element\"\r\n      onClick={() => startAlgorithm(algorithm)}\r\n    >\r\n      <div className=\"array-container\">\r\n        {algorithm.array.map(element => {\r\n          return (\r\n            <div\r\n              className=\"array-element\"\r\n              key={element.index}\r\n              style={{ height: `${element.getValue()}px` }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizationCard);\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport VisualizationCard from \"./VisualizationCard\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\n\r\nconst Visualizations = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { bubbleAlgorithm } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div className=\"visualisations-container\">\r\n      <VisualizationCard algorithm={bubbleAlgorithm} />\r\n      <VisualizationCard algorithm={bubbleAlgorithm} />\r\n      <VisualizationCard algorithm={bubbleAlgorithm} />\r\n      <VisualizationCard algorithm={bubbleAlgorithm} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Visualizations);\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport ArrayTextElement from \"./ArrayTextElement\";\r\nimport ArrayColorElement from \"./ArrayColorElement\";\r\nimport Visualizations from \"./Visualizations\";\r\n\r\nconst SortingVisualizator = () => {\r\n  return (\r\n    <div>\r\n      <Visualizations />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(SortingVisualizator);\r\n","import React from \"react\";\nimport SortingVisualizator from \"../../features/SortingVisualizator\";\nimport { observer } from \"mobx-react-lite\";\n\nconst App = () => {\n  return (\n    <div>\n      <SortingVisualizator />\n    </div>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/styling/styles.css';\nimport './app/styling/visualizer.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}