{"version":3,"sources":["app/models/visualizerOptions.ts","app/common/utils/mathHelpers.ts","app/styling/colors.ts","app/models/sortable.ts","app/common/utils/arrayHelpers.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","algorithms/selectionSort.ts","algorithms/quickSort.ts","algorithms/mergeSort.ts","app/stores/visualizerStore.ts","app/stores/rootStore.ts","features/Visualizer.tsx","features/AnimationSettings.tsx","features/VisualizerSettings.tsx","features/VisualizerSidebar.tsx","features/VisualizerContainer.tsx","features/InfoTabs.tsx","features/VisualizerInfo.tsx","features/VisualizerCard.tsx","features/VisualizersCarousel.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithms","AnimationTypes","randomNumber","from","to","Math","round","random","remap","minMaxIn","minMaxOut","value","squared","logarithmicLinear","customColors","primary","primaryDark","primaryLight","complementary","complementaryDark","complementaryLight","secondary","secondaryDark","secondaryLight","grey","colors","greyDark","greyLight","SortableNumber","this","other","getValue","color","toString","observable","swap","array","index1","index2","tmp","shuffle","i","length","j","floor","generateSortableNumbers","count","push","data","title","class","description","timeComplexity","spaceComplexity","BubbleSort","type","slice","animations","Comparison","isGreaterThan","Swap","forEach","x","Finish","InsertionSort","key","leftElementIndex","isLessThan","Move","Set","element","SelectionSort","smallestIndex","QuickSort","quickSort","leftPointer","rightPointer","index","partition","pivotIndex","pivot","MergeSort","mergeSort","startIndex","middle","left","right","merge","startIndexLeft","startIndexRight","lCounter","rCounter","shifted","shift","concat","VisualizerStore","rootStore","elementsCount","animationSpeed","algorithmsMap","Map","animationsMap","getAlgorithm","algorithm","get","getArray","arraysMap","getAnimations","setAnimations","set","isAnimating","animatingMap","getColor","animationColorsMap","initialize","animation","animated","triggerIsAnimating","action","animationSettingsMap","blue","purple","green","noAnimations","undefined","sortingAlgorithm","sort","interval","setInterval","animate","clearInterval","resetAnimations","speed","setArray","generateSteadySortableNumbers","unshift","h","step","counter","generateSteppedArray","currentValue","configure","enforceActions","RootStoreContext","createContext","visualizerStore","useStyles","makeStyles","theme","createStyles","visualizer","width","height","vertical","display","gridTemplateRows","rowGap","bar","borderRadius","observer","classes","useContext","className","join","style","map","backgroundColor","root","palette","background","paper","checkbox","toggleAnimationSettings","handleToggle","List","subheader","ListSubheader","ListItem","role","dense","button","onClick","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","ListItemText","flexBasis","icon","breakpoints","up","fontSize","content","padding","spacing","React","useState","anchorEl","setAnchorEl","open","Boolean","id","Button","aria-label","aria-controls","aria-haspopup","variant","event","currentTarget","Popover","onClose","anchorOrigin","horizontal","transformOrigin","Box","marks","label","flexDirection","alignItems","borderBottomStyle","borderWidth","borderColor","slow","average","orange","fast","red","handleBarsAmountChange","changeSpeed","handleChangeSpeed","Paper","elevation","marginTop","Slider","min","max","orientation","defaultValue","aria-labelledby","valueLabelDisplay","onChange","Number","marginBottom","ButtonGroup","size","fullWidth","Badge","badge","position","card","actionArea","border","buttons","iconPlay","zIndex","marginLeft","top","transform","getRandomArray","getSteadyArray","getReversedArray","getSteppedArray","triggerSorting","Card","raised","CardActionArea","CardContent","tabs","tabContentContainer","overflow","flexGrow","tabContent","InfoTabs","currentTab","setCurrentTab","Container","Typography","gutterBottom","dangerouslySetInnerHTML","__html","marginRight","tags","flexWrap","margin","chip","Tooltip","interactive","Chip","Divider","visible","Grid","container","item","xs","carousel","buttonContainer","justifyContent","cardContainer","currentCard","setCurrentCard","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4742f8e1.chunk.js","sourcesContent":["import { ISortable } from \"./sortable\";\r\n\r\nexport enum Algorithms {\r\n  BubbleSort = \"bubbleSort\",\r\n  InsertionSort = \"insertionSort\",\r\n  SelectionSort = \"selectionSort\",\r\n  QuickSort = \"quickSort\",\r\n  MergeSort = \"mergeSort\"\r\n}\r\n\r\nexport interface IAnimation {\r\n  type: AnimationTypes;\r\n  index1: number;\r\n  index2: number;\r\n  element?: ISortable;\r\n  array?: ISortable[];\r\n}\r\n\r\nexport enum AnimationTypes {\r\n  Swap,\r\n  Comparison,\r\n  Move,\r\n  Set,\r\n  Finish\r\n}\r\n","const clamp = (min: number, max: number, t: number) => {\r\n  return Math.max(max, Math.min(min, t));\r\n};\r\n\r\nconst randomNumber = (from: number, to: number) =>\r\n  Math.round(Math.random() * (to - from) + from);\r\n\r\nconst remap = (\r\n  minMaxIn: [number, number],\r\n  minMaxOut: [number, number],\r\n  value: number\r\n) =>\r\n  minMaxOut[0] +\r\n  ((value - minMaxIn[0]) * (minMaxOut[1] - minMaxOut[0])) /\r\n    (minMaxIn[1] - minMaxIn[0]);\r\n\r\nconst squared = \"<p>N<sup>2</sup></p>\";\r\nconst logarithmicLinear =\r\n  \"<p><span style='font-style: italic'>N </span>log<span style='font-style: italic'>N</span></p>\";\r\nconst logarithmic = \"<p>log<span style='font-style: italic'>N</span></p>\";\r\nconst linear = \"<p>N</p>\";\r\nconst constant = \" <p>1</p>\";\r\n\r\nexport {\r\n  clamp,\r\n  randomNumber,\r\n  remap,\r\n  squared,\r\n  logarithmicLinear,\r\n  logarithmic,\r\n  linear,\r\n  constant\r\n};\r\n","import { colors } from \"@material-ui/core\";\r\n\r\nexport const customColors = {\r\n  primary: \"#3f51b5\",\r\n  primaryDark: \"#002984\",\r\n  primaryLight: \"#757de8\",\r\n  complementary: \"#ffc841\",\r\n  complementaryDark: \"#f9b713\",\r\n  complementaryLight: \"#ffdf90\",\r\n  secondary: \"#f44336\",\r\n  secondaryDark: \"#ba000d\",\r\n  secondaryLight: \"#ff7961\",\r\n  grey: colors.grey[400],\r\n  greyDark: colors.grey[600],\r\n  greyLight: colors.grey[200],\r\n};\r\n","import { clamp } from \"../common/utils/mathHelpers\";\r\nimport { customColors } from \"../styling/colors\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport interface ISortable {\r\n  isGreaterThan(other: ISortable): boolean;\r\n  isLessThan(other: ISortable): boolean;\r\n  getValue(): number;\r\n  getColor(): string;\r\n  color: string;\r\n  toString(): string;\r\n}\r\n\r\nexport class SortableNumber implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = value;\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return this.color;\r\n  }\r\n  @observable color = customColors.primary;\r\n\r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\nexport class SortableColor implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = clamp(0, 360, value);\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.getValue()}, 100%, 50%)`;\r\n  }\r\n  color = \"0\";\r\n  toString() {\r\n    return `hsl(${this.value.toString()}, 100%, 50%)`;\r\n  }\r\n}\r\n","import { ISortable, SortableNumber } from \"../../models/sortable\";\r\nimport { randomNumber, remap } from \"./mathHelpers\";\r\n\r\nfunction swap(array: any[], index1: number, index2: number) {\r\n  let tmp = array[index1];\r\n  array[index1] = array[index2];\r\n  array[index2] = tmp;\r\n}\r\n\r\nfunction shuffle(array: ISortable[]): ISortable[] {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nconst generateSortableNumbers = (\r\n  from: number,\r\n  to: number,\r\n  count: number\r\n): ISortable[] => {\r\n  let array: ISortable[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    array.push(new SortableNumber(randomNumber(0, 100)));\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst generateSteadySortableNumbers = (count: number): ISortable[] => {\r\n  let array: ISortable[] = [];\r\n\r\n  for (let i = 1; i <= count; i++) {\r\n    array.push(new SortableNumber(remap([0, count], [0, 100], i)));\r\n  }\r\n\r\n  return shuffle(array);\r\n};\r\n\r\nconst generateSteppedArray = (count: number): ISortable[] => {\r\n  let array: ISortable[] = [];\r\n\r\n  let h = 10;\r\n  let step = Math.floor((count - 1) / 4);\r\n  let counter = 0;\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    array.push(new SortableNumber(h));\r\n\r\n    if (++counter === step) {\r\n      counter = 0;\r\n      h += 22;\r\n      if (h > 76) {\r\n        h = 100;\r\n      }\r\n    }\r\n  }\r\n\r\n  return shuffle(array);\r\n};\r\n\r\nexport {\r\n  swap,\r\n  shuffle,\r\n  generateSortableNumbers,\r\n  generateSteadySortableNumbers,\r\n  generateSteppedArray\r\n};\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { swap } from \"../app/common/utils/arrayHelpers\";\r\nimport { squared, constant } from \"../app/common/utils/mathHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Bubble Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `<p>Bubble sort, sometimes referred to as sinking sort,\r\n                is a simple sorting algorithm that repeatedly steps\r\n                through the list, compares adjacent elements and swaps\r\n                them if they are in the wrong order. The pass through\r\n                the list is repeated until the list is sorted.</p>`,\r\n  timeComplexity: squared,\r\n  spaceComplexity: constant\r\n};\r\n\r\nclass BubbleSort implements ISortingAlgorithm {\r\n  type = Algorithms.BubbleSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      for (let j = 0; j < array.length - 1 - i; j++) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: j,\r\n          index2: j + 1\r\n        });\r\n\r\n        if (array[j].isGreaterThan(array[j + 1])) {\r\n          swap(array, j, j + 1);\r\n\r\n          animations.push({\r\n            type: AnimationTypes.Swap,\r\n            index1: j,\r\n            index2: j + 1\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    array.forEach((x, i) =>\r\n      animations.push({\r\n        type: AnimationTypes.Finish,\r\n        index1: i,\r\n        index2: i\r\n      })\r\n    );\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default BubbleSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../app/models/visualizerOptions\";\r\nimport { squared, constant } from \"../app/common/utils/mathHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Insertion sort\",\r\n  class: \"Comparison sort\",\r\n  description: `<p>Following are the steps involved in insertion sort:\r\n                  <ol>\r\n                    <li>\r\n                    We start by making the second element of the given array,\r\n                    i.e. element at index 1, the key. The key element here is\r\n                      the new card that we need to add to our existing sorted\r\n                      set of cards(remember the example with cards above).\r\n                    </li>\r\n                    <li>\r\n                    We compare the key element with the element(s) before it,\r\n                    in this case, element at index 0: \r\n                      <ul>\r\n                        <li>\r\n                        If the key element is less than the first element, we\r\n                          insert the key element before the first element.\r\n                        </li>\r\n                        <li>\r\n                        If the key element is greater than the first element,\r\n                          then we insert it after the first element.\r\n                        </li>\r\n                      </ul>\r\n                    </li>\r\n                    <li>\r\n                    Then, we make the third element of the array as key and\r\n                    will compare it with elements to it's left and insert\r\n                    it at the right position.\r\n                    </li>\r\n                    <li>\r\n                    And we go on repeating this, until the array is sorted.\r\n                    </li>\r\n                  </ol>\r\n                </p>`,\r\n  timeComplexity: squared,\r\n  spaceComplexity: constant\r\n};\r\n\r\nclass InsertionSort implements ISortingAlgorithm {\r\n  type = Algorithms.InsertionSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n      let key = array[i];\r\n      let leftElementIndex = i - 1;\r\n\r\n      while (leftElementIndex >= 0 && key.isLessThan(array[leftElementIndex])) {\r\n        array[leftElementIndex + 1] = array[leftElementIndex];\r\n\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: leftElementIndex,\r\n          index2: leftElementIndex + 1\r\n        });\r\n\r\n        animations.push({\r\n          type: AnimationTypes.Move,\r\n          index1: leftElementIndex,\r\n          index2: leftElementIndex + 1\r\n        });\r\n\r\n        leftElementIndex--;\r\n      }\r\n\r\n      array[leftElementIndex + 1] = key;\r\n\r\n      animations.push({\r\n        type: AnimationTypes.Set,\r\n        index1: leftElementIndex + 1,\r\n        index2: leftElementIndex + 1,\r\n        element: key\r\n      });\r\n    }\r\n\r\n    array.forEach((x, i) =>\r\n      animations.push({\r\n        type: AnimationTypes.Finish,\r\n        index1: i,\r\n        index2: i\r\n      })\r\n    );\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default InsertionSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { squared, constant } from \"../app/common/utils/mathHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Selection Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `<p>Following are the steps involved in selection sort\r\n                    (for sorting a given array in ascending order):\r\n                  <ol>\r\n                    <li>\r\n                    Starting from the first element, we search the smallest\r\n                    element in the array, and replace it with the element\r\n                    in the first position.\r\n                    </li>\r\n                    <li>\r\n                    We then move on to the second position, and look for smallest\r\n                    element present in the subarray, starting from index 1, till \r\n                    the last index.\r\n                    </li>\r\n                    <li>\r\n                    We replace the element at the second position in the original \r\n                    array, or we can say at the first position in the subarray, \r\n                    with the second smallest element.\r\n                    </li>\r\n                    <li>\r\n                    This is repeated, until the array is completely sorted.\r\n                    </li>\r\n                  </ol>\r\n                </p>`,\r\n  timeComplexity: squared,\r\n  spaceComplexity: constant\r\n};\r\n\r\nclass SelectionSort implements ISortingAlgorithm {\r\n  type = Algorithms.SelectionSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      let smallestIndex = i;\r\n      for (let j = i + 1; j < array.length; j++) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: i,\r\n          index2: j\r\n        });\r\n\r\n        if (array[j].isLessThan(array[smallestIndex])) {\r\n          smallestIndex = j;\r\n        }\r\n      }\r\n\r\n      let tmp = array[i];\r\n      array[i] = array[smallestIndex];\r\n      array[smallestIndex] = tmp;\r\n\r\n      animations.push({\r\n        type: AnimationTypes.Swap,\r\n        index1: i,\r\n        index2: smallestIndex\r\n      });\r\n    }\r\n\r\n    array.forEach((x, i) =>\r\n      animations.push({\r\n        type: AnimationTypes.Finish,\r\n        index1: i,\r\n        index2: i\r\n      })\r\n    );\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default SelectionSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { swap } from \"../app/common/utils/arrayHelpers\";\r\nimport {\r\n  logarithmicLinear,\r\n  logarithmic\r\n} from \"../app/common/utils/mathHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Quick Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `<p>Following are the steps involved in quick sort algorithm:\r\n                  <ol>\r\n                    <li>\r\n                    After selecting an element as pivot, which is the last index\r\n                    of the array in our case, we divide the array for the first time.\r\n                    </li>\r\n                    <li>\r\n                    In quick sort, we call this partitioning. It is not simple breaking \r\n                    down of array into 2 subarrays, but in case of partitioning, the \r\n                    array elements are so positioned that all the elements smaller than \r\n                    the pivot will be on the left side of the pivot and all the elements \r\n                    greater than the pivot will be on the right side of it.\r\n                    </li>\r\n                    <li>\r\n                    And the pivot element will be at its final sorted position.\r\n                    </li>\r\n                    <li>\r\n                    The elements to the left and right, may not be sorted.\r\n                    </li>\r\n                    <li>\r\n                    Then we pick subarrays, elements on the left of pivot and elements on \r\n                    the right of pivot, and we perform partitioning on them by choosing a \r\n                    pivot in the subarrays.\r\n                    </li>\r\n                  </ol>\r\n                </p>`,\r\n  timeComplexity: logarithmicLinear,\r\n  spaceComplexity: logarithmic\r\n};\r\n\r\nclass QuickSort implements ISortingAlgorithm {\r\n  type = Algorithms.QuickSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    this.quickSort(array, 0, array.length - 1, animations);\r\n\r\n    array.forEach((x, i) =>\r\n      animations.push({\r\n        type: AnimationTypes.Finish,\r\n        index1: i,\r\n        index2: i\r\n      })\r\n    );\r\n\r\n    return animations;\r\n  }\r\n\r\n  quickSort(\r\n    array: ISortable[],\r\n    leftPointer: number,\r\n    rightPointer: number,\r\n    animations: IAnimation[]\r\n  ) {\r\n    var index;\r\n\r\n    if (array.length > 1) {\r\n      index = this.partition(array, leftPointer, rightPointer, animations);\r\n\r\n      if (leftPointer < index - 1) {\r\n        this.quickSort(array, leftPointer, index - 1, animations);\r\n      }\r\n\r\n      if (rightPointer > index) {\r\n        this.quickSort(array, index, rightPointer, animations);\r\n      }\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  partition(\r\n    array: ISortable[],\r\n    leftPointer: number,\r\n    rightPointer: number,\r\n    animations: IAnimation[]\r\n  ) {\r\n    let pivotIndex = Math.floor((leftPointer + rightPointer) / 2);\r\n    let pivot = array[pivotIndex];\r\n\r\n    while (leftPointer <= rightPointer) {\r\n      while (array[leftPointer].isLessThan(pivot)) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: leftPointer,\r\n          index2: pivotIndex\r\n        });\r\n\r\n        leftPointer++;\r\n      }\r\n\r\n      while (array[rightPointer].isGreaterThan(pivot)) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: rightPointer,\r\n          index2: pivotIndex\r\n        });\r\n\r\n        rightPointer--;\r\n      }\r\n\r\n      if (leftPointer <= rightPointer) {\r\n        animations.push({\r\n          type: AnimationTypes.Swap,\r\n          index1: leftPointer,\r\n          index2: rightPointer\r\n        });\r\n\r\n        swap(array, leftPointer, rightPointer);\r\n        leftPointer++;\r\n        rightPointer--;\r\n      }\r\n    }\r\n\r\n    return leftPointer;\r\n  }\r\n}\r\n\r\nexport default QuickSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { linear, logarithmicLinear } from \"../app/common/utils/mathHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Merge Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `<p>In merge sort we follow the following steps:\r\n                  <ol>\r\n                    <li>\r\n                    We take a variable p and store the starting index \r\n                    of our array in this. And we take another variable \r\n                    r and store the last index of array in it.\r\n                    </li>\r\n                    <li>\r\n                    Then we find the middle of the array using the formula \r\n                    (p + r)/2 and mark the middle index as q, and break the \r\n                    array into two subarrays, from p to q and from q + 1 to \r\n                    r index.\r\n                    </li>\r\n                    <li>\r\n                    Then we divide these 2 subarrays again, just like we divided \r\n                    our main array and this continues.\r\n                    </li>\r\n                    <li>\r\n                    Once we have divided the main array into subarrays with single \r\n                    elements, then we start merging the subarrays.\r\n                  </ol>\r\n                </p>`,\r\n  timeComplexity: logarithmicLinear,\r\n  spaceComplexity: linear\r\n};\r\n\r\nclass MergeSort implements ISortingAlgorithm {\r\n  type = Algorithms.MergeSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    this.mergeSort(array, animations, 0);\r\n\r\n    array.forEach((x, i) =>\r\n      animations.push({\r\n        type: AnimationTypes.Finish,\r\n        index1: i,\r\n        index2: i\r\n      })\r\n    );\r\n\r\n    return animations;\r\n  }\r\n\r\n  mergeSort(\r\n    array: ISortable[],\r\n    animations: IAnimation[],\r\n    startIndex: number\r\n  ): ISortable[] {\r\n    if (array.length <= 1) {\r\n      return array;\r\n    }\r\n\r\n    const middle = Math.floor(array.length / 2);\r\n    const left = array.slice(0, middle);\r\n    const right = array.slice(middle);\r\n\r\n    return this.merge(\r\n      this.mergeSort(left, animations, startIndex),\r\n      this.mergeSort(right, animations, startIndex + middle),\r\n      animations,\r\n      startIndex,\r\n      startIndex + middle\r\n    );\r\n  }\r\n\r\n  merge(\r\n    left: ISortable[],\r\n    right: ISortable[],\r\n    animations: IAnimation[],\r\n    startIndexLeft: number,\r\n    startIndexRight: number\r\n  ): ISortable[] {\r\n    let array: ISortable[] = [];\r\n    let lCounter = 0;\r\n    let rCounter = 0;\r\n\r\n    while (left.length && right.length) {\r\n      animations.push({\r\n        type: AnimationTypes.Comparison,\r\n        index1: startIndexLeft + lCounter,\r\n        index2: startIndexRight + rCounter\r\n      });\r\n\r\n      if (left[0].isLessThan(right[0])) {\r\n        lCounter++;\r\n        let shifted = left.shift();\r\n        if (shifted) {\r\n          array.push(shifted);\r\n        }\r\n      } else {\r\n        rCounter++;\r\n        let shifted = right.shift();\r\n        if (shifted) {\r\n          array.push(shifted);\r\n        }\r\n      }\r\n    }\r\n\r\n    array = array.concat(left.slice().concat(right.slice()));\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      animations.push({\r\n        type: AnimationTypes.Set,\r\n        index1: startIndexLeft + i,\r\n        index2: startIndexLeft + i,\r\n        element: array[i]\r\n      });\r\n    }\r\n\r\n    return array;\r\n  }\r\n}\r\n\r\nexport default MergeSort;\r\n","import { RootStore } from \"./rootStore\";\r\nimport { IStore } from \"./store\";\r\nimport { ISortable, SortableNumber } from \"../models/sortable\";\r\nimport { action, observable } from \"mobx\";\r\nimport { ISortingAlgorithm } from \"../models/sortingAlgorithm\";\r\nimport BubbleSort from \"../../algorithms/bubbleSort\";\r\nimport InsertionSort from \"../../algorithms/insertionSort\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../models/visualizerOptions\";\r\nimport {\r\n  generateSortableNumbers,\r\n  generateSteadySortableNumbers,\r\n  generateSteppedArray\r\n} from \"../common/utils/arrayHelpers\";\r\nimport { customColors } from \"../styling/colors\";\r\nimport SelectionSort from \"../../algorithms/selectionSort\";\r\nimport QuickSort from \"../../algorithms/quickSort\";\r\nimport MergeSort from \"../../algorithms/mergeSort\";\r\nimport { remap } from \"../common/utils/mathHelpers\";\r\nimport { green, blue, purple } from \"@material-ui/core/colors\";\r\n\r\nexport default class VisualizerStore implements IStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  elementsCount = 50;\r\n  animationSpeed = 10;\r\n  @observable speed = \"average\";\r\n\r\n  algorithmsMap = new Map<Algorithms, ISortingAlgorithm>();\r\n  @observable arraysMap = new Map<Algorithms, ISortable[]>();\r\n  animationsMap = new Map<Algorithms, IAnimation[]>();\r\n  @observable animatingMap = new Map<Algorithms, boolean>();\r\n  @observable animationSettingsMap = new Map<AnimationTypes, boolean>();\r\n  @observable animationColorsMap = new Map<AnimationTypes, string>();\r\n\r\n  @action initialize = () => {\r\n    this.animationSettingsMap.set(AnimationTypes.Swap, true);\r\n    this.animationSettingsMap.set(AnimationTypes.Comparison, false);\r\n    this.animationSettingsMap.set(AnimationTypes.Move, true);\r\n    this.animationSettingsMap.set(AnimationTypes.Set, true);\r\n\r\n    this.animationColorsMap.set(\r\n      AnimationTypes.Swap,\r\n      customColors.secondaryDark\r\n    );\r\n    this.animationColorsMap.set(\r\n      AnimationTypes.Comparison,\r\n      customColors.complementaryDark\r\n    );\r\n    this.animationColorsMap.set(AnimationTypes.Move, blue[500]);\r\n    this.animationColorsMap.set(AnimationTypes.Set, purple[500]);\r\n    this.animationColorsMap.set(AnimationTypes.Finish, green[500]);\r\n\r\n    this.algorithmsMap.set(Algorithms.BubbleSort, new BubbleSort());\r\n    this.algorithmsMap.set(Algorithms.InsertionSort, new InsertionSort());\r\n    this.algorithmsMap.set(Algorithms.SelectionSort, new SelectionSort());\r\n    this.algorithmsMap.set(Algorithms.QuickSort, new QuickSort());\r\n    this.algorithmsMap.set(Algorithms.MergeSort, new MergeSort());\r\n\r\n    this.algorithmsMap.forEach(x =>\r\n      this.arraysMap.set(\r\n        x.type,\r\n        generateSortableNumbers(1, 100, this.elementsCount)\r\n      )\r\n    );\r\n  };\r\n\r\n  @action triggerSorting = (algorithm: Algorithms) => {\r\n    this.triggerIsAnimating(algorithm, !this.isAnimating(algorithm));\r\n\r\n    let animations = this.getAnimations(algorithm);\r\n    let noAnimations = false;\r\n\r\n    if (animations !== undefined) {\r\n      noAnimations = animations.length === 0;\r\n    }\r\n\r\n    if (noAnimations) {\r\n      let sortingAlgorithm = this.getAlgorithm(algorithm);\r\n      let array = this.getArray(algorithm);\r\n      let animations = this.setAnimations(\r\n        algorithm,\r\n        sortingAlgorithm.sort(array)\r\n      );\r\n\r\n      var interval = setInterval(() => {\r\n        if (this.isAnimating(algorithm)) {\r\n          var animation;\r\n          while (animations.length > 0) {\r\n            animation = animations.shift();\r\n\r\n            if (\r\n              animation &&\r\n              !this.animationSettingsMap.get(animation.type) &&\r\n              animation.type !== AnimationTypes.Finish\r\n            ) {\r\n              this.animate(animation, array, false);\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (animation) {\r\n            this.animate(animation, array, true);\r\n          } else {\r\n            this.triggerIsAnimating(algorithm, false);\r\n            clearInterval(interval);\r\n          }\r\n        }\r\n      }, this.animationSpeed);\r\n    }\r\n  };\r\n\r\n  @action handleBarsAmountChange = (value: number, algorithm: Algorithms) => {\r\n    if (value < 5 || value > 200 || value === this.elementsCount) {\r\n      return;\r\n    }\r\n\r\n    this.elementsCount = value;\r\n    this.resetAnimations(algorithm);\r\n\r\n    this.arraysMap.set(\r\n      algorithm,\r\n      generateSortableNumbers(1, 100, this.elementsCount)\r\n    );\r\n  };\r\n\r\n  @action changeSpeed = (speed: string) => {\r\n    this.speed = speed;\r\n    switch (speed) {\r\n      case \"slow\":\r\n        this.animationSpeed = 500;\r\n        break;\r\n      case \"average\":\r\n        this.animationSpeed = 100;\r\n        break;\r\n      case \"fast\":\r\n        this.animationSpeed = 1;\r\n        break;\r\n    }\r\n  };\r\n\r\n  @action animate(\r\n    animation: IAnimation,\r\n    array: ISortable[],\r\n    animated: boolean\r\n  ) {\r\n    if (animated) {\r\n      array.forEach(x => (x.color = customColors.primary));\r\n    }\r\n\r\n    switch (animation.type) {\r\n      case AnimationTypes.Comparison:\r\n        if (animated) {\r\n          array[animation.index1].color = this.getColor(\r\n            AnimationTypes.Comparison\r\n          );\r\n          array[animation.index2].color = this.getColor(\r\n            AnimationTypes.Comparison\r\n          );\r\n        }\r\n        break;\r\n      case AnimationTypes.Swap:\r\n        if (animated) {\r\n          array[animation.index1].color = this.getColor(AnimationTypes.Swap);\r\n          array[animation.index2].color = this.getColor(AnimationTypes.Swap);\r\n        }\r\n\r\n        let tmp = array[animation.index1];\r\n        array[animation.index1] = array[animation.index2];\r\n        array[animation.index2] = tmp;\r\n        break;\r\n      case AnimationTypes.Move:\r\n        array[animation.index2] = array[animation.index1];\r\n\r\n        if (animated) {\r\n          array[animation.index2].color = this.getColor(AnimationTypes.Move);\r\n        }\r\n        break;\r\n      case AnimationTypes.Set:\r\n        if (animation.element) {\r\n          array[animation.index2] = animation.element;\r\n\r\n          if (animated) {\r\n            array[animation.index2].color = this.getColor(AnimationTypes.Set);\r\n          }\r\n        }\r\n        break;\r\n      case AnimationTypes.Finish:\r\n        for (let i = 0; i <= animation.index1; i++) {\r\n          array[i].color = this.getColor(AnimationTypes.Finish);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  @action getRandomArray = (algorithm: Algorithms) => {\r\n    this.resetAnimations(algorithm);\r\n\r\n    this.setArray(\r\n      algorithm,\r\n      generateSortableNumbers(0, 25, this.elementsCount)\r\n    );\r\n  };\r\n\r\n  @action getSteadyArray = (algorithm: Algorithms) => {\r\n    this.resetAnimations(algorithm);\r\n\r\n    this.setArray(algorithm, generateSteadySortableNumbers(this.elementsCount));\r\n  };\r\n\r\n  @action getReversedArray = (algorithm: Algorithms) => {\r\n    this.resetAnimations(algorithm);\r\n\r\n    let array: ISortable[] = [];\r\n    for (let i = 1; i <= this.elementsCount; i++) {\r\n      array.unshift(\r\n        new SortableNumber(remap([0, this.elementsCount], [0, 100], i))\r\n      );\r\n    }\r\n\r\n    this.setArray(algorithm, array);\r\n  };\r\n\r\n  @action getSteppedArray = (algorithm: Algorithms) => {\r\n    this.resetAnimations(algorithm);\r\n\r\n    this.setArray(algorithm, generateSteppedArray(this.elementsCount));\r\n  };\r\n\r\n  @action resetAnimations(algorithm: Algorithms) {\r\n    this.setAnimations(algorithm, []);\r\n    if (this.isAnimating(algorithm)) {\r\n      this.triggerIsAnimating(algorithm, false);\r\n    }\r\n  }\r\n\r\n  getAlgorithm = (algorithm: Algorithms): ISortingAlgorithm => {\r\n    return this.algorithmsMap.get(algorithm) ?? new BubbleSort();\r\n  };\r\n\r\n  getArray = (algorithm: Algorithms): ISortable[] => {\r\n    return this.arraysMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  @action setArray = (algorithm: Algorithms, array: ISortable[]) => {\r\n    this.arraysMap.set(algorithm, array);\r\n  };\r\n\r\n  getAnimations = (algorithm: Algorithms): IAnimation[] => {\r\n    return this.animationsMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  setAnimations = (\r\n    algorithm: Algorithms,\r\n    animations: IAnimation[]\r\n  ): IAnimation[] => {\r\n    this.animationsMap.set(algorithm, animations);\r\n    return this.animationsMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  isAnimating = (algorithm: Algorithms): boolean => {\r\n    return this.animatingMap.get(algorithm) ?? false;\r\n  };\r\n\r\n  getColor = (type: AnimationTypes): string => {\r\n    return this.animationColorsMap.get(type) ?? customColors.grey;\r\n  };\r\n\r\n  @action triggerIsAnimating = (algorithm: Algorithms, value: boolean) => {\r\n    this.animatingMap.set(algorithm, value);\r\n  };\r\n\r\n  @action toggleAnimationSettings = (type: AnimationTypes) => {\r\n    let currentValue = this.animationSettingsMap.get(type);\r\n    this.animationSettingsMap.set(type, !currentValue ?? true);\r\n  };\r\n}\r\n","import { createContext } from \"react\";\r\nimport { configure } from \"mobx\";\r\nimport { IStore } from \"./store\";\r\nimport VisualizerStore from \"./visualizerStore\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore implements IStore {\r\n  visualizerStore: VisualizerStore;\r\n\r\n  constructor() {\r\n    this.visualizerStore = new VisualizerStore(this);\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    visualizer: {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n    },\r\n    vertical: {\r\n      display: \"grid\",\r\n      gridTemplateRows: \"repeat(100, minmax(1px, 1fr))\",\r\n      rowGap: \"1px\"\r\n    },\r\n    bar: {\r\n      display: \"flex\",\r\n      height: \"100%\",\r\n      borderRadius: \"0 2px 2px 0\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Visualizer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { getArray } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div\r\n      className={[classes.visualizer, classes.vertical].join(\" \")}\r\n      style={{\r\n        gridTemplateRows: `repeat(${\r\n          getArray(algorithm.type).length\r\n        }, minmax(1px, 1fr))`\r\n      }}\r\n    >\r\n      {getArray(algorithm.type).map((element, index) => {\r\n        return (\r\n          <div key={index} className={classes.bar}>\r\n            <div\r\n              style={{\r\n                width: `${element.getValue() === 0 ? 1 : element.getValue()}%`,\r\n                backgroundColor: `${element.getColor()}`\r\n              }}\r\n            ></div>\r\n            <div\r\n              style={{\r\n                width: `${100 - element.getValue()}%`,\r\n                backgroundColor: `${customColors.grey}`\r\n              }}\r\n            ></div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Visualizer);\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Checkbox,\r\n  ListItemText,\r\n  ListSubheader\r\n} from \"@material-ui/core\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport { AnimationTypes } from \"../app/models/visualizerOptions\";\r\nimport ColorLensIcon from \"@material-ui/icons/ColorLens\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: \"100%\",\r\n      backgroundColor: theme.palette.background.paper\r\n    },\r\n    checkbox: {\r\n      height: \"1em\"\r\n    }\r\n  })\r\n);\r\n\r\nconst AnimationSettings = () => {\r\n  const classes = useStyles();\r\n\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    animationSettingsMap,\r\n    toggleAnimationSettings,\r\n    getColor\r\n  } = rootStore.visualizerStore;\r\n\r\n  const handleToggle = (value: number) => () => {\r\n    toggleAnimationSettings(value);\r\n  };\r\n\r\n  return (\r\n    <List\r\n      className={classes.root}\r\n      subheader={<ListSubheader>Active animations</ListSubheader>}\r\n    >\r\n      <ListItem\r\n        key=\"checkbox-animation-swap\"\r\n        role={undefined}\r\n        dense\r\n        button\r\n        onClick={handleToggle(AnimationTypes.Swap)}\r\n      >\r\n        <ListItemIcon className={classes.checkbox}>\r\n          <Checkbox\r\n            edge=\"start\"\r\n            checked={animationSettingsMap.get(AnimationTypes.Swap)}\r\n            tabIndex={-1}\r\n            disableRipple\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Swap\" />\r\n\r\n        <ColorLensIcon style={{ color: getColor(AnimationTypes.Swap) }} />\r\n      </ListItem>\r\n\r\n      <ListItem\r\n        key=\"checkbox-animation-comparison\"\r\n        role={undefined}\r\n        dense\r\n        button\r\n        onClick={handleToggle(AnimationTypes.Comparison)}\r\n      >\r\n        <ListItemIcon className={classes.checkbox}>\r\n          <Checkbox\r\n            edge=\"start\"\r\n            checked={animationSettingsMap.get(AnimationTypes.Comparison)}\r\n            tabIndex={-1}\r\n            disableRipple\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Comparison\" />\r\n\r\n        <ColorLensIcon style={{ color: getColor(AnimationTypes.Comparison) }} />\r\n      </ListItem>\r\n\r\n      <ListItem\r\n        key=\"checkbox-animation-move\"\r\n        role={undefined}\r\n        dense\r\n        button\r\n        onClick={handleToggle(AnimationTypes.Move)}\r\n      >\r\n        <ListItemIcon className={classes.checkbox}>\r\n          <Checkbox\r\n            edge=\"start\"\r\n            checked={animationSettingsMap.get(AnimationTypes.Move)}\r\n            tabIndex={-1}\r\n            disableRipple\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Move\" />\r\n        <ColorLensIcon style={{ color: getColor(AnimationTypes.Move) }} />\r\n      </ListItem>\r\n\r\n      <ListItem\r\n        key=\"checkbox-animation-set\"\r\n        role={undefined}\r\n        dense\r\n        button\r\n        onClick={handleToggle(AnimationTypes.Set)}\r\n      >\r\n        <ListItemIcon className={classes.checkbox}>\r\n          <Checkbox\r\n            edge=\"start\"\r\n            checked={animationSettingsMap.get(AnimationTypes.Set)}\r\n            tabIndex={-1}\r\n            disableRipple\r\n          />\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Set\" style={{ flexBasis: \"40%\" }} />\r\n\r\n        <ColorLensIcon style={{ color: getColor(AnimationTypes.Set) }} />\r\n      </ListItem>\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default observer(AnimationSettings);\r\n","import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SettingsIcon from \"@material-ui/icons/Settings\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Popover,\r\n  Box\r\n} from \"@material-ui/core\";\r\nimport AnimationSettings from \"./AnimationSettings\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    icon: {\r\n      [theme.breakpoints.up(\"xs\")]: {\r\n        fontSize: 20\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: 25\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        fontSize: 30\r\n      },\r\n      [theme.breakpoints.up(\"lg\")]: {\r\n        fontSize: 35\r\n      },\r\n      [theme.breakpoints.up(\"xl\")]: {\r\n        fontSize: 50\r\n      }\r\n    },\r\n    content: {\r\n      padding: theme.spacing(2)\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerSettings = () => {\r\n  const classes = useStyles();\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\r\n    null\r\n  );\r\n\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        aria-label=\"more\"\r\n        aria-controls=\"long-menu\"\r\n        aria-haspopup=\"true\"\r\n        variant=\"text\"\r\n        onClick={handleClick}\r\n      >\r\n        <SettingsIcon color=\"action\" className={classes.icon} />\r\n      </Button>\r\n\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"right\"\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\"\r\n        }}\r\n      >\r\n        <Box className={classes.content}>\r\n          <AnimationSettings />\r\n        </Box>\r\n      </Popover>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerSettings);\r\n","import React, { useContext } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  Theme,\r\n  makeStyles,\r\n  createStyles,\r\n  Paper,\r\n  Slider,\r\n  ButtonGroup,\r\n  Button,\r\n  Badge\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport { green, orange, red } from \"@material-ui/core/colors\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport SpeedIcon from \"@material-ui/icons/Speed\";\r\nimport VisualizerSettings from \"./VisualizerSettings\";\r\n\r\nconst marks = [\r\n  {\r\n    value: 5,\r\n    label: \"5\"\r\n  },\r\n  {\r\n    value: 25,\r\n    label: \"25\"\r\n  },\r\n  {\r\n    value: 50,\r\n    label: \"50\"\r\n  },\r\n  {\r\n    value: 75,\r\n    label: \"75\"\r\n  },\r\n  {\r\n    value: 100,\r\n    label: \"100\"\r\n  },\r\n  {\r\n    value: 150,\r\n    label: \"150\"\r\n  },\r\n  {\r\n    value: 200,\r\n    label: \"200\"\r\n  }\r\n];\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      height: \"90%\",\r\n      alignItems: \"center\",\r\n      width: \"30%\",\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"2px\",\r\n      borderColor: customColors.secondaryLight,\r\n      \"&:hover\": {\r\n        borderWidth: \"5px\"\r\n      }\r\n    },\r\n    icon: {\r\n      [theme.breakpoints.up(\"xs\")]: {\r\n        fontSize: 20\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: 25\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        fontSize: 30\r\n      },\r\n      [theme.breakpoints.up(\"lg\")]: {\r\n        fontSize: 35\r\n      },\r\n      [theme.breakpoints.up(\"xl\")]: {\r\n        fontSize: 50\r\n      }\r\n    },\r\n    slow: {\r\n      backgroundColor: green[600],\r\n      color: \"white\"\r\n    },\r\n    average: {\r\n      backgroundColor: orange[600],\r\n      color: \"white\"\r\n    },\r\n    fast: {\r\n      backgroundColor: red[600],\r\n      color: \"white\"\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerSidebar: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const {\r\n    handleBarsAmountChange,\r\n    changeSpeed,\r\n    speed\r\n  } = rootStore.visualizerStore;\r\n\r\n  const handleChangeSpeed = (speed: string) => {\r\n    changeSpeed(speed);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root} elevation={20}>\r\n      <VisualizerSettings />\r\n\r\n      <div style={{ marginTop: \"1em\" }} />\r\n      <Slider\r\n        style={{ color: `${customColors.secondary}` }}\r\n        min={5}\r\n        max={200}\r\n        orientation=\"vertical\"\r\n        defaultValue={25}\r\n        aria-labelledby=\"discrete-slider-custom\"\r\n        step={1}\r\n        valueLabelDisplay=\"on\"\r\n        marks={marks}\r\n        onChange={(event, value) =>\r\n          handleBarsAmountChange(Number(value), algorithm.type)\r\n        }\r\n      />\r\n      <div style={{ marginBottom: \"1em\" }} />\r\n      \r\n      <ButtonGroup\r\n        orientation=\"vertical\"\r\n        size=\"large\"\r\n        variant=\"text\"\r\n        color=\"secondary\"\r\n        aria-label=\"contained primary button group\"\r\n        fullWidth\r\n      >\r\n        <Button\r\n          style={{\r\n            backgroundColor: speed === \"slow\" ? green[100] : \"white\"\r\n          }}\r\n          aria-label=\"slow\"\r\n          onClick={() => handleChangeSpeed(\"slow\")}\r\n        >\r\n          <Badge\r\n            classes={{ badge: classes.slow }}\r\n            variant=\"dot\"\r\n            style={{ color: `${green[600]}` }}\r\n          >\r\n            <SpeedIcon\r\n              className={classes.icon}\r\n              style={{ color: `${green[600]}` }}\r\n            />\r\n          </Badge>\r\n        </Button>\r\n        <Button\r\n          style={{\r\n            backgroundColor: speed === \"average\" ? orange[100] : \"white\"\r\n          }}\r\n          aria-label=\"average\"\r\n          onClick={() => handleChangeSpeed(\"average\")}\r\n        >\r\n          <Badge\r\n            classes={{ badge: classes.average }}\r\n            variant=\"dot\"\r\n            style={{ color: `${orange[600]}` }}\r\n          >\r\n            <SpeedIcon\r\n              className={classes.icon}\r\n              style={{ color: `${orange[600]}` }}\r\n            />\r\n          </Badge>\r\n        </Button>\r\n        <Button\r\n          style={{\r\n            backgroundColor: speed === \"fast\" ? red[100] : \"white\"\r\n          }}\r\n          aria-label=\"fast\"\r\n          onClick={() => handleChangeSpeed(\"fast\")}\r\n        >\r\n          <Badge\r\n            classes={{ badge: classes.fast }}\r\n            variant=\"dot\"\r\n            style={{ color: `${red[600]}` }}\r\n          >\r\n            <SpeedIcon\r\n              className={classes.icon}\r\n              style={{ color: `${red[600]}` }}\r\n            />\r\n          </Badge>\r\n        </Button>\r\n      </ButtonGroup>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerSidebar);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport Visualizer from \"./Visualizer\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Card,\r\n  ButtonGroup,\r\n  CardActionArea,\r\n  CardContent,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport SignalCellular4BarIcon from \"@material-ui/icons/SignalCellular4Bar\";\r\nimport SignalCellularAltIcon from \"@material-ui/icons/SignalCellularAlt\";\r\nimport ShuffleIcon from \"@material-ui/icons/Shuffle\";\r\nimport VisualizerSidebar from \"./VisualizerSidebar\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      height: \"100%\",\r\n      position: \"relative\",\r\n      right: \"2.5em\",\r\n      display: \"flex\",\r\n      flexDirection: \"row\"\r\n    },\r\n    card: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"2px\",\r\n      borderColor: customColors.primaryDark\r\n    },\r\n    actionArea: {\r\n      flexBasis: \"90%\",\r\n      border: \"dashed\",\r\n      borderWidth: \"3px\",\r\n      borderColor: customColors.primaryLight,\r\n      \"&:hover\": {\r\n        border: \"solid\",\r\n        background: customColors.grey,\r\n        borderColor: customColors.primary,\r\n        borderWidth: \"3px\"\r\n      }\r\n    },\r\n    content: {\r\n      height: \"100%\",\r\n      padding: 0\r\n    },\r\n    buttons: {\r\n      flexBasis: \"10%\"\r\n    },\r\n    icon: {\r\n      [theme.breakpoints.up(\"xs\")]: {\r\n        fontSize: 20\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: 25\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        fontSize: 30\r\n      },\r\n      [theme.breakpoints.up(\"lg\")]: {\r\n        fontSize: 35\r\n      },\r\n      [theme.breakpoints.up(\"xl\")]: {\r\n        fontSize: 50\r\n      }\r\n    },\r\n    iconPlay: {\r\n      zIndex: 1,\r\n      position: \"absolute\",\r\n      left: \"50%\",\r\n      marginLeft: \"-25%\",\r\n      top: \"50%\",\r\n      marginTop: \"-25%\",\r\n      width: \"5em\",\r\n      height: \"5em\",\r\n      color: \"white\",\r\n      \"&:hover\": {\r\n        transform: \"scale(1.02)\"\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerContainer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const {\r\n    getRandomArray,\r\n    getSteadyArray,\r\n    getReversedArray,\r\n    getSteppedArray,\r\n    triggerSorting,\r\n    isAnimating\r\n  } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <VisualizerSidebar algorithm={algorithm} />\r\n\r\n      <Card raised className={classes.card}>\r\n        <CardActionArea\r\n          id=\"visualizerArea\"\r\n          className={classes.actionArea}\r\n          onClick={() => triggerSorting(algorithm.type)}\r\n        >\r\n          {isAnimating(algorithm.type) ? (\r\n            <PauseCircleOutlineIcon\r\n              id=\"pauseIcon\"\r\n              className={classes.iconPlay}\r\n            />\r\n          ) : (\r\n            <PlayCircleOutlineIcon id=\"playIcon\" className={classes.iconPlay} />\r\n          )}\r\n\r\n          <CardContent className={classes.content}>\r\n            <Visualizer algorithm={algorithm} />\r\n          </CardContent>\r\n        </CardActionArea>\r\n\r\n        <ButtonGroup\r\n          className={classes.buttons}\r\n          size=\"large\"\r\n          variant=\"text\"\r\n          color=\"primary\"\r\n          aria-label=\"contained primary button group\"\r\n          fullWidth\r\n        >\r\n          <Button onClick={() => getRandomArray(algorithm.type)}>\r\n            <ShuffleIcon className={classes.icon} />\r\n          </Button>\r\n          <Button onClick={() => getSteadyArray(algorithm.type)}>\r\n            <SignalCellular4BarIcon className={classes.icon} />\r\n          </Button>\r\n          <Button onClick={() => getReversedArray(algorithm.type)}>\r\n            <SignalCellular4BarIcon\r\n              className={classes.icon}\r\n              style={{ transform: \"scaleX(-1)\" }}\r\n            />\r\n          </Button>\r\n          <Button onClick={() => getSteppedArray(algorithm.type)}>\r\n            <SignalCellularAltIcon className={classes.icon} />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerContainer);\r\n","import React, { useState } from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport {\r\n  ButtonGroup,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport CodeIcon from \"@material-ui/icons/Code\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    tabs: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      height: \"100%\",\r\n      marginTop: \"1em\",\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"2px\",\r\n      borderColor: customColors.primaryDark\r\n    },\r\n    icon: {\r\n      [theme.breakpoints.up(\"xs\")]: {\r\n        fontSize: 15\r\n      },\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        fontSize: 20\r\n      },\r\n      [theme.breakpoints.up(\"md\")]: {\r\n        fontSize: 25\r\n      },\r\n      [theme.breakpoints.up(\"lg\")]: {\r\n        fontSize: 30\r\n      },\r\n      [theme.breakpoints.up(\"xl\")]: {\r\n        fontSize: 50\r\n      }\r\n    },\r\n    tabContentContainer: {\r\n      overflow: \"auto\",\r\n      position: \"relative\",\r\n      flexGrow: 1,\r\n      padding: \"1em\"\r\n    },\r\n    tabContent: {\r\n      overflow: \"auto\",\r\n      position: \"absolute\"\r\n    }\r\n  })\r\n);\r\n\r\nconst InfoTabs: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [currentTab, setCurrentTab] = useState(1);\r\n\r\n  return (\r\n    <Paper className={classes.tabs} elevation={5}>\r\n      <ButtonGroup\r\n        size=\"large\"\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        aria-label=\"contained primary button group\"\r\n        fullWidth\r\n      >\r\n        <Button\r\n          onClick={() => setCurrentTab(1)}\r\n          variant={currentTab === 1 ? \"contained\" : \"text\"}\r\n        >\r\n          <DescriptionIcon className={classes.icon} />\r\n        </Button>\r\n        <Button\r\n          onClick={() => setCurrentTab(2)}\r\n          variant={currentTab === 2 ? \"contained\" : \"text\"}\r\n        >\r\n          <CodeIcon className={classes.icon} />\r\n        </Button>\r\n        <Button\r\n          onClick={() => setCurrentTab(3)}\r\n          variant={currentTab === 3 ? \"contained\" : \"text\"}\r\n        >\r\n          <AddIcon className={classes.icon} />\r\n          <RemoveIcon className={classes.icon} />\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <Container\r\n        className={classes.tabContentContainer}\r\n        style={{ display: currentTab === 1 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Description\r\n        </Typography>\r\n\r\n        <Typography\r\n          className={classes.tabContent}\r\n          variant=\"body2\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: algorithm.data.description\r\n          }}\r\n        ></Typography>\r\n      </Container>\r\n      <Container\r\n        className={classes.tabContentContainer}\r\n        style={{ display: currentTab === 2 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Implementaions\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"primary\">\r\n          ---Coming Soon---\r\n        </Typography>\r\n      </Container>\r\n      <Container\r\n        className={classes.tabContentContainer}\r\n        style={{ display: currentTab === 3 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          Use Cases\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"primary\">\r\n          ---Coming Soon---\r\n        </Typography>\r\n      </Container>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default InfoTabs;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport InfoTabs from \"./InfoTabs\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n  Tooltip,\r\n  Divider\r\n} from \"@material-ui/core\";\r\nimport TimerIcon from \"@material-ui/icons/Timer\";\r\nimport SdStorageIcon from \"@material-ui/icons/SdStorage\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      marginRight: \"1.5em\",\r\n      flexDirection: \"column\",\r\n      height: \"100%\"\r\n    },\r\n    tags: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      marginBottom: \"1em\",\r\n      \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n      }\r\n    },\r\n    chip: {\r\n      fontSize: \"1em\"\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerInfo: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Typography variant=\"h2\">{algorithm.data.title}</Typography>\r\n      <div className={classes.tags}>\r\n        <Tooltip title=\"Average time complexity\" interactive>\r\n          <Chip\r\n            className={classes.chip}\r\n            color=\"primary\"\r\n            icon={<TimerIcon />}\r\n            label={\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: algorithm.data.timeComplexity\r\n                }}\r\n              ></span>\r\n            }\r\n          ></Chip>\r\n        </Tooltip>\r\n        <Tooltip title=\"Space complexity\" interactive>\r\n          <Chip\r\n            className={classes.chip}\r\n            color=\"primary\"\r\n            icon={<SdStorageIcon />}\r\n            label={\r\n              <span\r\n                dangerouslySetInnerHTML={{\r\n                  __html: algorithm.data.spaceComplexity\r\n                }}\r\n              ></span>\r\n            }\r\n          />\r\n        </Tooltip>\r\n      </div>\r\n      <Divider variant=\"fullWidth\" />\r\n\r\n      <InfoTabs algorithm={algorithm} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerInfo);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport VisualizerContainer from \"./VisualizerContainer\";\r\nimport VisualizerInfo from \"./VisualizerInfo\";\r\nimport { Card, makeStyles, createStyles, Theme, Grid } from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      height: \"80%\",\r\n      width: \"100%\",\r\n      padding: \"1em 1em 1.5em 1em\",\r\n      backgroundColor: customColors.greyLight,\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"3px\",\r\n      borderColor: customColors.primaryDark,\r\n      overflow: \"visible\"\r\n    },\r\n    content: {\r\n      height: \"100%\"\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerCard: React.FC<{\r\n  algorithm: ISortingAlgorithm;\r\n  visible: boolean;\r\n}> = ({ algorithm, visible }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      raised\r\n      className={classes.root}\r\n      style={{ display: visible ? \"block\" : \"none\" }}\r\n    >\r\n      <Grid container className={classes.content}>\r\n        <Grid item xs={4}>\r\n          <VisualizerContainer algorithm={algorithm} />\r\n        </Grid>\r\n        <Grid item xs={8}>\r\n          <VisualizerInfo algorithm={algorithm} />\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerCard);\r\n","import React, { useContext, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport VisualizerCard from \"./VisualizerCard\";\r\nimport {\r\n  Button,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Box\r\n} from \"@material-ui/core\"; //maaaaaaaau\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport { Algorithms } from \"../app/models/visualizerOptions\";\r\n//tut potsemu to net kotika a vernee pusisti\r\n//if sirlja kotik import kotik to Tartu from TALLINN\r\n/*\r\nconst neigbours = [\r\n  {\r\n    prev: \"last\",\r\n    next: \"Insertion\"\r\n  },\r\n  {\r\n    prev: \"Bubble\",\r\n    next: \"Selection\"\r\n  },\r\n  {\r\n    prev: \"Insertion\",\r\n    next: \"Quick\"\r\n  },\r\n  {\r\n    prev: \"Selection\",\r\n    next: \"Merge\"\r\n  },\r\n  {\r\n    prev: \"Quick\",\r\n    next: \"Insertion\"\r\n  }\r\n];\r\n*/\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    carousel: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      display: \"flex\"\r\n    },\r\n    buttonContainer: {\r\n      flexBasis: \"15%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\"\r\n    },\r\n    cardContainer: {\r\n      flexBasis: \"70%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\"\r\n    },\r\n    button: {\r\n      height: \"10%\",\r\n      width: \"50%\",\r\n      backgroundColor: \"transparent\",\r\n      border: \"solid\",\r\n      borderWidth: \"100%\",\r\n      borderColor: customColors.complementary\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizersCarousel = () => {\r\n  const classes = useStyles();\r\n\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { getAlgorithm } = rootStore.visualizerStore;\r\n\r\n  const [currentCard, setCurrentCard] = useState(1);\r\n\r\n  const nextSlide = () => {\r\n    if (currentCard >= 5) {\r\n      setCurrentCard(1);\r\n    } else {\r\n      setCurrentCard(currentCard + 1);\r\n    }\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    if (currentCard <= 1) {\r\n      setCurrentCard(5);\r\n    } else {\r\n      setCurrentCard(currentCard - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box className={classes.carousel}>\r\n      <Box className={classes.buttonContainer}>\r\n        <Button\r\n          className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => prevSlide()}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Box>\r\n\r\n      <Box className={classes.cardContainer}>\r\n        <VisualizerCard\r\n          algorithm={getAlgorithm(Algorithms.BubbleSort)}\r\n          visible={currentCard === 1}\r\n        />\r\n        <VisualizerCard\r\n          algorithm={getAlgorithm(Algorithms.InsertionSort)}\r\n          visible={currentCard === 2}\r\n        />\r\n        <VisualizerCard\r\n          algorithm={getAlgorithm(Algorithms.SelectionSort)}\r\n          visible={currentCard === 3}\r\n        />\r\n        <VisualizerCard\r\n          algorithm={getAlgorithm(Algorithms.QuickSort)}\r\n          visible={currentCard === 4}\r\n        />\r\n        <VisualizerCard\r\n          algorithm={getAlgorithm(Algorithms.MergeSort)}\r\n          visible={currentCard === 5}\r\n        />\r\n      </Box>\r\n\r\n      <Box className={classes.buttonContainer}>\r\n        <Button\r\n          className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => nextSlide()}\r\n        >\r\n          Next\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizersCarousel);\r\n","import React, { Fragment } from \"react\";\nimport VisualizersCarousel from \"../../features/VisualizersCarousel\";\nimport { observer } from \"mobx-react-lite\";\n\nconst App = () => {\n  return (\n    <Fragment>\n      <VisualizersCarousel />\n    </Fragment>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app/styling/styles.scss\";\nimport App from \"./app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}