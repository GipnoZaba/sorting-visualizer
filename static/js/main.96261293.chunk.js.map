{"version":3,"sources":["app/models/visualizerOptions.ts","app/common/utils/mathHelpers.ts","app/styling/colors.ts","app/models/sortable.ts","app/common/utils/arrayHelpers.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","algorithms/selectionSort.ts","algorithms/quickSort.ts","app/stores/visualizerStore.ts","app/stores/rootStore.ts","features/Visualizer.tsx","features/VisualizerContainer.tsx","features/InfoTabs.tsx","features/VisualizerInfo.tsx","features/VisualizerCard.tsx","features/VisualizersCarousel.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["Algorithms","AnimationTypes","randomNumber","from","to","Math","round","random","customColors","primary","primaryDark","primaryLight","complementary","complementaryDark","complementaryLight","secondary","secondaryDark","secondaryLight","grey","colors","greyDark","greyLight","SortableNumber","value","this","other","getValue","color","toString","observable","swap","array","index1","index2","tmp","generateSortableNumbers","count","i","push","generateSteadySortableNumbers","length","j","floor","shuffle","data","title","class","description","timeComplexity","spaceComplexity","BubbleSort","type","slice","animations","Comparison","isGreaterThan","Swap","InsertionSort","key","leftElementIndex","isLessThan","Move","Set","element","SelectionSort","smallestIndex","QuickSort","quickSort","leftPointer","rightPointer","index","partition","pivotIndex","pivot","VisualizerStore","rootStore","elementsCount","animationSpeed","algorithmsMap","Map","animationsMap","getAlgorithm","algorithm","get","getArray","arraysMap","getAnimations","setAnimations","set","isAnimating","animatingMap","initAlgorithms","animation","forEach","x","triggerIsAnimating","action","noAnimations","undefined","sortingAlgorithm","sort","interval","setInterval","shift","animate","clearInterval","resetArray","setArray","unshift","configure","enforceActions","RootStoreContext","createContext","visualizerStore","useStyles","makeStyles","theme","createStyles","visualizer","width","height","vertical","display","gridTemplateRows","rowGap","horizontal","gridTemplateColumns","columnGap","alignItems","bar","borderRadius","observer","classes","useContext","className","join","map","style","backgroundColor","getColor","root","overflow","position","right","flexDirection","borderBottomStyle","borderWidth","borderColor","actionArea","flexBasis","border","background","content","boxSizing","padding","buttons","icon","zIndex","left","marginLeft","top","marginTop","transform","getRandomArray","getSteadyArray","getReversedArray","triggerSorting","Card","raised","CardActionArea","id","onClick","CardContent","ButtonGroup","size","variant","aria-label","fullWidth","Button","tabs","marginRight","tabContent","InfoTabs","useState","currentTab","setCurrentTab","Paper","elevation","Container","Typography","tags","flexWrap","margin","spacing","Box","Divider","Tooltip","interactive","Chip","label","card","visible","carousel","justifyContent","button","currentCard","setCurrentCard","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iNAEYA,EAcAC,E,iGCZNC,G,OAAe,SAACC,EAAcC,GAAf,OACnBC,KAAKC,MAAMD,KAAKE,UAAYH,EAAKD,GAAQA,K,QCH9BK,EAAe,CAC1BC,QAAS,UACTC,YAAa,UACbC,aAAc,UACdC,cAAe,UACfC,kBAAmB,UACnBC,mBAAoB,UACpBC,UAAW,UACXC,cAAe,UACfC,eAAgB,UAChBC,KAAMC,IAAOD,KAAK,KAClBE,SAAUD,IAAOD,KAAK,KACtBG,UAAWF,IAAOD,KAAK,MCDZI,GAAb,aAGE,WAAYC,GAAgB,yBAF5BA,WAE2B,mCACzBC,KAAKD,MAAQA,EAJjB,0DAOgBE,GACZ,OAAOD,KAAKE,WAAaD,EAAMC,aARnC,iCAWaD,GACT,OAAOD,KAAKE,WAAaD,EAAMC,aAZnC,iCAgBI,OAAOF,KAAKD,QAhBhB,iCAoBI,OAAOC,KAAKG,QApBhB,iCAyBI,OAAOH,KAAKD,MAAMK,eAzBtB,wCAsBGC,KAtBH,yEAsBsBrB,EAAaC,WAtBnC,GCVA,SAASqB,EAAKC,EAAcC,EAAgBC,GAC1C,IAAIC,EAAMH,EAAMC,GAChBD,EAAMC,GAAUD,EAAME,GACtBF,EAAME,GAAUC,G,SJJNlC,K,wBAAAA,E,8BAAAA,E,8BAAAA,E,uBAAAA,M,cAcAC,O,eAAAA,I,2BAAAA,I,eAAAA,I,cAAAA,M,KICZ,I,oBAAMkC,EAA0B,SAC9BhC,EACAC,EACAgC,GAIA,IAFA,IAAIL,EAAqB,GAEhBM,EAAI,EAAGA,EAAID,EAAOC,IACzBN,EAAMO,KAAK,IAAIhB,EAAepB,EAAaC,EAAMC,KAGnD,OAAO2B,GAGHQ,EAAgC,SAACH,GAGrC,IAFA,IAAIL,EAAqB,GAEhBM,EAAI,EAAGA,GAAKD,EAAOC,IAC1BN,EAAMO,KAAK,IAAIhB,EAAee,IAGhC,OA7BF,SAAoBN,GAClB,IAAK,IAAIM,EAAIN,EAAMS,OAAS,EAAGH,EAAI,EAAGA,IAAK,CACzC,IAAMI,EAAIpC,KAAKqC,MAAMrC,KAAKE,UAAY8B,EAAI,IADD,EAElB,CAACN,EAAMU,GAAIV,EAAMM,IAAvCN,EAAMM,GAFkC,KAE9BN,EAAMU,GAFwB,KAI3C,OAAOV,EAwBAY,CAAQZ,IC1BXa,EAAuB,CAC3BC,MAAO,cACPC,MAAO,kBACPC,YAAY,0UAKZC,eAAgB,MAChBC,gBAAiB,KAoCJC,E,iDAhCbC,KAAOnD,EAAWkD,W,KAClBN,KAAOA,E,iDAEFb,GACHA,EAAQA,EAAMqB,QAGd,IAFA,IAAIC,EAA2B,GAEtBhB,EAAI,EAAGA,EAAIN,EAAMS,OAAQH,IAChC,IAAK,IAAII,EAAI,EAAGA,EAAIV,EAAMS,OAAS,EAAIH,EAAGI,IACxCY,EAAWf,KAAK,CACda,KAAMlD,EAAeqD,WACrBtB,OAAQS,EACRR,OAAQQ,EAAI,IAGVV,EAAMU,GAAGc,cAAcxB,EAAMU,EAAI,MAEnCX,EAAKC,EAAOU,EAAGA,EAAI,GAEnBY,EAAWf,KAAK,CACda,KAAMlD,EAAeuD,KACrBxB,OAAQS,EACRR,OAAQQ,EAAI,KAMpB,OAAOY,M,KC1CLT,EAAuB,CAC3BC,MAAO,iBACPC,MAAO,kBACPC,YAAa,GACbC,eAAgB,MAChBC,gBAAiB,KA+CJQ,E,iDA3CbN,KAAOnD,EAAWyD,c,KAClBb,KAAOA,E,iDAEFb,GACHA,EAAQA,EAAMqB,QAGd,IAFA,IAAIC,EAA2B,GAEtBhB,EAAI,EAAGA,EAAIN,EAAMS,OAAQH,IAAK,CAIrC,IAHA,IAAIqB,EAAM3B,EAAMM,GACZsB,EAAmBtB,EAAI,EAEpBsB,GAAoB,GAAKD,EAAIE,WAAW7B,EAAM4B,KACnD5B,EAAM4B,EAAmB,GAAK5B,EAAM4B,GAEpCN,EAAWf,KAAK,CACda,KAAMlD,EAAeqD,WACrBtB,OAAQ2B,EACR1B,OAAQ0B,EAAmB,IAG7BN,EAAWf,KAAK,CACda,KAAMlD,EAAe4D,KACrB7B,OAAQ2B,EACR1B,OAAQ0B,EAAmB,IAG7BA,IAGF5B,EAAM4B,EAAmB,GAAKD,EAE9BL,EAAWf,KAAK,CACda,KAAMlD,EAAe6D,IACrB9B,OAAQ2B,EAAmB,EAC3B1B,OAAQ0B,EAAmB,EAC3BI,QAASL,IAIb,OAAOL,M,KChDLT,EAAuB,CAC3BC,MAAO,iBACPC,MAAO,kBACPC,YAAa,GACbC,eAAgB,MAChBC,gBAAiB,KAwCJe,E,iDApCbb,KAAOnD,EAAWgE,c,KAClBpB,KAAOA,E,iDAEFb,GACHA,EAAQA,EAAMqB,QAGd,IAFA,IAAIC,EAA2B,GAEtBhB,EAAI,EAAGA,EAAIN,EAAMS,OAAQH,IAAK,CAErC,IADA,IAAI4B,EAAgB5B,EACXI,EAAIJ,EAAI,EAAGI,EAAIV,EAAMS,OAAQC,IACpCY,EAAWf,KAAK,CACda,KAAMlD,EAAeqD,WACrBtB,OAAQK,EACRJ,OAAQQ,IAGNV,EAAMU,GAAGmB,WAAW7B,EAAMkC,MAC5BA,EAAgBxB,GAIpB,IAAIP,EAAMH,EAAMM,GAChBN,EAAMM,GAAKN,EAAMkC,GACjBlC,EAAMkC,GAAiB/B,EAEvBmB,EAAWf,KAAK,CACda,KAAMlD,EAAeuD,KACrBxB,OAAQK,EACRJ,OAAQgC,IAIZ,OAAOZ,M,KCxCLT,EAAuB,CAC3BC,MAAO,aACPC,MAAO,kBACPC,YAAa,GACbC,eAAgB,MAChBC,gBAAiB,KAoFJiB,E,iDAhFbf,KAAOnD,EAAWkE,U,KAClBtB,KAAOA,E,iDAEFb,GACHA,EAAQA,EAAMqB,QAGd,OAAO5B,KAAK2C,UAAUpC,EAAO,EAAGA,EAAMS,OAAS,EAFhB,M,gCAM/BT,EACAqC,EACAC,EACAhB,GAEA,IAAIiB,EAcJ,OAZIvC,EAAMS,OAAS,IAGb4B,GAFJE,EAAQ9C,KAAK+C,UAAUxC,EAAOqC,EAAaC,EAAchB,IAE/B,GACxB7B,KAAK2C,UAAUpC,EAAOqC,EAAaE,EAAQ,EAAGjB,GAG5CgB,EAAeC,GACjB9C,KAAK2C,UAAUpC,EAAOuC,EAAOD,EAAchB,IAIxCA,I,gCAIPtB,EACAqC,EACAC,EACAhB,GAKA,IAHA,IAAImB,EAAanE,KAAKqC,OAAO0B,EAAcC,GAAgB,GACvDI,EAAQ1C,EAAMyC,GAEXJ,GAAeC,GAAc,CAClC,KAAOtC,EAAMqC,GAAaR,WAAWa,IACnCpB,EAAWf,KAAK,CACda,KAAMlD,EAAeqD,WACrBtB,OAAQoC,EACRnC,OAAQuC,IAGVJ,IAGF,KAAOrC,EAAMsC,GAAcd,cAAckB,IACvCpB,EAAWf,KAAK,CACda,KAAMlD,EAAeqD,WACrBtB,OAAQqC,EACRpC,OAAQuC,IAGVH,IAGED,GAAeC,IACjBhB,EAAWf,KAAK,CACda,KAAMlD,EAAeuD,KACrBxB,OAAQoC,EACRnC,OAAQoC,IAGVvC,EAAKC,EAAOqC,EAAaC,GACzBD,IACAC,KAIJ,OAAOD,M,KC7EUM,G,aAGnB,WAAYC,GAAuB,IAAD,gCAFlCA,eAEkC,OAMlCC,cAAgB,IANkB,KAOlCC,eAAiB,GAPiB,KASlCC,cAAgB,IAAIC,IATc,0CAWlCC,cAAgB,IAAID,IAXc,iQAsHlCE,aAAe,SAACC,GAA8C,IAAD,EAC3D,iBAAO,EAAKJ,cAAcK,IAAID,UAA9B,QAA4C,IAAIhC,GAvHhB,KA0HlCkC,SAAW,SAACF,GAAwC,IAAD,EACjD,iBAAO,EAAKG,UAAUF,IAAID,UAA1B,QAAwC,IA3HR,yCAkIlCI,cAAgB,SAACJ,GAAyC,IAAD,EACvD,iBAAO,EAAKF,cAAcG,IAAID,UAA9B,QAA4C,IAnIZ,KAsIlCK,cAAgB,SACdL,EACA7B,GACkB,IAAD,EAEjB,OADA,EAAK2B,cAAcQ,IAAIN,EAAW7B,GAClC,UAAO,EAAK2B,cAAcG,IAAID,UAA9B,QAA4C,IA3IZ,KA8IlCO,YAAc,SAACP,GAAoC,IAAD,EAChD,iBAAO,EAAKQ,aAAaP,IAAID,UAA7B,UA/IgC,8CAChC1D,KAAKmD,UAAYA,EAEjBnD,KAAKmE,iB,oDA0DSC,EAAuB7D,GAErC,OADAA,EAAM8D,SAAQ,SAAAC,GAAC,OAAKA,EAAEnE,MAAQnB,EAAaC,WACnCmF,EAAUzC,MAChB,KAAKlD,EAAeqD,WAClBvB,EAAM6D,EAAU5D,QAAQL,MAAQnB,EAAaK,kBAC7CkB,EAAM6D,EAAU3D,QAAQN,MAAQnB,EAAaK,kBAC7C,MACF,KAAKZ,EAAeuD,KAClB,IAAItB,EAAMH,EAAM6D,EAAU5D,QAC1BD,EAAM6D,EAAU5D,QAAUD,EAAM6D,EAAU3D,QAC1CF,EAAM6D,EAAU5D,QAAQL,MAAQnB,EAAaQ,cAC7Ce,EAAM6D,EAAU3D,QAAUC,EAC1BH,EAAM6D,EAAU3D,QAAQN,MAAQnB,EAAaQ,cAC7C,MACF,KAAKf,EAAe4D,KAClB9B,EAAM6D,EAAU3D,QAAUF,EAAM6D,EAAU5D,QAC1CD,EAAM6D,EAAU3D,QAAQN,MAAQnB,EAAaO,UAC7C,MACF,KAAKd,EAAe6D,IACd8B,EAAU7B,UACZhC,EAAM6D,EAAU3D,QAAU2D,EAAU7B,Y,iCAgCzBmB,GACjB1D,KAAK+D,cAAcL,EAAW,IAC1B1D,KAAKiE,YAAYP,IAAY1D,KAAKuE,mBAAmBb,O,4CAzG1DrD,K,yEAAuB,IAAIkD,O,0CAE3BlD,K,yEAA0B,IAAIkD,O,4CAE9BiB,K,oFAAwB,WACvB,EAAKlB,cAAcU,IAAIxF,EAAWkD,WAAY,IAAIA,GAClD,EAAK4B,cAAcU,IAAIxF,EAAWyD,cAAe,IAAIA,GACrD,EAAKqB,cAAcU,IAAIxF,EAAWgE,cAAe,IAAIA,GACrD,EAAKc,cAAcU,IAAIxF,EAAWkE,UAAW,IAAIA,GAEjD,EAAKY,cAAce,SAAQ,SAAAC,GAAC,OAC1B,EAAKT,UAAUG,IACbM,EAAE3C,KACFhB,EAAwB,EAAG,IAAK,EAAKyC,uB,4CAK1CoB,K,oFAAwB,SAACd,GACxB,EAAKa,mBAAmBb,GAExB,IAAI7B,EAAa,EAAKiC,cAAcJ,GAChCe,GAAe,EAMnB,QAJmBC,IAAf7C,IACF4C,EAAqC,IAAtB5C,EAAWb,QAGxByD,EACF,IAAIE,EAAmB,EAAKlB,aAAaC,GACrCnD,EAAQ,EAAKqD,SAASF,GACtB7B,EAAa,EAAKkC,cACpBL,EACAiB,EACGC,KAAKrE,IAGNsE,EAAWC,aAAY,WACzB,GAAI,EAAKb,YAAYP,GAAY,CAC/B,IAAIU,EAAYvC,EAAWkD,QACvBX,EACF,EAAKY,QAAQZ,EAAW7D,IAExB,EAAKgE,mBAAmBb,GACxBuB,cAAcJ,OAGjB,EAAKxB,oB,mCAIXmB,K,gHA0BAA,K,oFAAwB,SAACd,GACxB,EAAKwB,WAAWxB,GAEhB,EAAKyB,SACHzB,EACA/C,EAAwB,EAAG,IAAK,EAAKyC,oB,4CAIxCoB,K,oFAAwB,SAACd,GACxB,EAAKwB,WAAWxB,GAEhB,EAAKyB,SAASzB,EAAW3C,EAA8B,EAAKqC,oB,8CAG7DoB,K,oFAA0B,SAACd,GAC1B,EAAKwB,WAAWxB,GAGhB,IADA,IAAInD,EAAqB,GAChBM,EAAI,EAAGA,GAAK,EAAKuC,cAAevC,IACvCN,EAAM6E,QAAQ,IAAItF,EAAee,IAGnC,EAAKsE,SAASzB,EAAWnD,O,sCAG1BiE,K,6GAaAA,K,oFAAkB,SAACd,EAAuBnD,GACzC,EAAKsD,UAAUG,IAAIN,EAAWnD,O,gDAmB/BiE,K,oFAA4B,SAACd,GAC5B,EAAKQ,aAAaF,IAAIN,GAAY,EAAKO,YAAYP,Q,GCrKvD2B,YAAU,CAAEC,eAAgB,WAErB,IAQMC,EAAmBC,wBAAc,IAL5C,aAAe,yBAFfC,qBAEc,EACZzF,KAAKyF,gBAAkB,IAAIvC,EAAgBlD,Q,kBCJzC0F,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,WAAY,CACVC,MAAO,OACPC,OAAQ,QAEVC,SAAU,CACRC,QAAS,OACTC,iBAAkB,gCAClBC,OAAQ,OAEVC,WAAY,CACVH,QAAS,OACTI,oBAAqB,gCACrBC,UAAW,MACXC,WAAY,YAEdC,IAAK,CACHP,QAAS,OACTF,OAAQ,OACRU,aAAc,oBAqCLC,eAhCgD,SAAC,GAEzD,IADLjD,EACI,EADJA,UAEMkD,EAAUlB,IAGR9B,EAFUiD,qBAAWtB,GAEEE,gBAAvB7B,SAER,OACE,yBAAKkD,UAAW,CAACF,EAAQd,WAAYc,EAAQX,UAAUc,KAAK,MACzDnD,EAASF,EAAU/B,MAAMqF,KAAI,SAACzE,EAASO,GACtC,OACE,yBAAKZ,IAAKY,EAAOgE,UAAWF,EAAQH,KAClC,yBACEQ,MAAO,CACLlB,MAAM,GAAD,OAAKxD,EAAQrC,WAAb,KACLgH,gBAAgB,GAAD,OAAK3E,EAAQ4E,eAGhC,yBACEF,MAAO,CACLlB,MAAM,GAAD,OAAK,IAAMxD,EAAQrC,WAAnB,KACLgH,gBAAgB,GAAD,OAAKlI,EAAaU,iB,uFCnC3CgG,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXuB,KAAM,CACJC,SAAU,UACVrB,OAAQ,OACRsB,SAAU,WACVC,MAAO,QACPrB,QAAS,OACTsB,cAAe,SACfC,kBAAmB,QACnBC,YAAa,MACbC,YAAa3I,EAAaE,aAE5B0I,WAAY,CACVC,UAAW,MACXC,OAAQ,SACRJ,YAAa,MACbC,YAAa3I,EAAaG,aAC1B,UAAW,CACT2I,OAAQ,QACRC,WAAY/I,EAAaU,KACzBiI,YAAa3I,EAAaC,QAC1ByI,YAAa,QAGjBM,QAAS,CACPhC,OAAQ,OACRiC,UAAW,aACXC,QAAS,GAEXC,QAAS,CACPN,UAAW,OAEbO,KAAM,CACJC,OAAQ,EACRf,SAAU,WACVgB,KAAM,MACNC,WAAY,OACZC,IAAK,MACLC,UAAW,OACX1C,MAAO,MACPC,OAAQ,MACR7F,MAAO,QACP,UAAW,CACTuI,UAAW,qBAuDJ/B,gBAjDyD,SAAC,GAElE,IADLjD,EACI,EADJA,UAEMkD,EAAUlB,KADZ,EAEcmB,qBAAWtB,GAQfE,gBALZkD,EALE,EAKFA,eACAC,EANE,EAMFA,eACAC,EAPE,EAOFA,iBACAC,EARE,EAQFA,eACA7E,EATE,EASFA,YAGF,OACE,kBAAC8E,EAAA,EAAD,CAAMC,QAAM,EAAClC,UAAWF,EAAQQ,MAC9B,kBAAC6B,EAAA,EAAD,CACEC,GAAG,iBACHpC,UAAWF,EAAQgB,WACnBuB,QAAS,kBAAML,EAAepF,EAAU/B,QAEvCsC,EAAYP,EAAU/B,MACrB,kBAAC,KAAD,CAAwBuH,GAAG,YAAYpC,UAAWF,EAAQwB,OAE1D,kBAAC,KAAD,CAAuBc,GAAG,WAAWpC,UAAWF,EAAQwB,OAG1D,kBAACgB,EAAA,EAAD,CAAatC,UAAWF,EAAQoB,SAC9B,kBAAC,EAAD,CAAYtE,UAAWA,MAI3B,kBAAC2F,EAAA,EAAD,CACEvC,UAAWF,EAAQuB,QACnBmB,KAAK,QACLC,QAAQ,OACRpJ,MAAM,UACNqJ,aAAW,iCACXC,WAAS,GAET,kBAACC,EAAA,EAAD,CAAQP,QAAS,kBAAMR,EAAejF,EAAU/B,QAAhD,QACA,kBAAC+H,EAAA,EAAD,CAAQP,QAAS,kBAAMP,EAAelF,EAAU/B,QAAhD,OACA,kBAAC+H,EAAA,EAAD,CAAQP,QAAS,kBAAMN,EAAiBnF,EAAU/B,QAAlD,OACA,kBAAC+H,EAAA,EAAD,kB,8BClGFhE,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACX8D,KAAM,CACJlB,UAAW,MACXmB,YAAa,QACbnC,kBAAmB,QACnBC,YAAa,MACbC,YAAa3I,EAAaE,aAE5B2K,WAAY,CACV3B,QAAS,YA2EA4B,GAtE8C,SAAC,GAEvD,IADLpG,EACI,EADJA,UAEMkD,EAAUlB,KADZ,EAGgCqE,mBAAS,GAHzC,mBAGGC,EAHH,KAGeC,EAHf,KAKJ,OACE,kBAACC,GAAA,EAAD,CAAOpD,UAAWF,EAAQ+C,KAAMQ,UAAW,GACzC,kBAACd,EAAA,EAAD,CACEC,KAAK,QACLC,QAAQ,OACRpJ,MAAM,UACNqJ,aAAW,iCACXC,WAAS,GAET,kBAACC,EAAA,EAAD,CACEP,QAAS,kBAAMc,EAAc,IAC7BV,QAAwB,IAAfS,EAAmB,YAAc,QAF5C,QAMA,kBAACN,EAAA,EAAD,CACEP,QAAS,kBAAMc,EAAc,IAC7BV,QAAwB,IAAfS,EAAmB,YAAc,QAF5C,OAMA,kBAACN,EAAA,EAAD,CACEP,QAAS,kBAAMc,EAAc,IAC7BV,QAAwB,IAAfS,EAAmB,YAAc,QAF5C,OAMA,kBAACN,EAAA,EAAD,CACEP,QAAS,kBAAMc,EAAc,IAC7BV,QAAwB,IAAfS,EAAmB,YAAc,QAF5C,SAQF,kBAACI,GAAA,EAAD,CACEtD,UAAWF,EAAQiD,WACnB5C,MAAO,CAAEf,QAAwB,IAAf8D,EAAmB,QAAU,SAE/C,kBAACK,GAAA,EAAD,CAAYd,QAAQ,SAAS7F,EAAUtC,KAAKG,cAE9C,kBAAC6I,GAAA,EAAD,CACEtD,UAAWF,EAAQiD,WACnB5C,MAAO,CAAEf,QAAwB,IAAf8D,EAAmB,QAAU,SAE/C,kBAACK,GAAA,EAAD,CAAYd,QAAQ,SAApB,QAEF,kBAACa,GAAA,EAAD,CACEtD,UAAWF,EAAQiD,WACnB5C,MAAO,CAAEf,QAAwB,IAAf8D,EAAmB,QAAU,SAE/C,kBAACK,GAAA,EAAD,CAAYd,QAAQ,SAApB,QAEF,kBAACa,GAAA,EAAD,CACEtD,UAAWF,EAAQiD,WACnB5C,MAAO,CAAEf,QAAwB,IAAf8D,EAAmB,QAAU,SAE/C,kBAACK,GAAA,EAAD,CAAYd,QAAQ,SAApB,U,wCC9EF7D,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXyE,KAAM,CACJ7B,UAAW,MACXvC,QAAS,OACTqE,SAAU,OACV,QAAS,CACPC,OAAQ5E,EAAM6E,QAAQ,WAiCf9D,gBA3BoD,SAAC,GAE7D,IADLjD,EACI,EADJA,UAEMkD,EAAUlB,KAEhB,OACE,kBAACgF,GAAA,EAAD,KACE,kBAACL,GAAA,EAAD,CAAYd,QAAQ,MAAM7F,EAAUtC,KAAKC,OACzC,kBAACsJ,GAAA,EAAD,CAASpB,QAAQ,cACjB,yBAAKzC,UAAWF,EAAQ0D,MACtB,kBAACM,GAAA,EAAD,CAASvJ,MAAM,QAAQwJ,aAAW,GAChC,kBAACC,GAAA,EAAD,CACEC,MAAO,UAAOrH,EAAUtC,KAAKI,eAAiB,IAC9CrB,MAAM,aAIV,kBAAC2K,GAAA,EAAD,CACEC,MAAO,KAAOrH,EAAUtC,KAAKK,gBAAkB,IAC/CtB,MAAM,aAGV,kBAAC,GAAD,CAAUuD,UAAWA,QCpCrBgC,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXmF,KAAM,CACJR,OAAQ,OACRzE,MAAO,MACPsB,SAAU,UACVH,gBAAiBlI,EAAaa,UAC9B4H,kBAAmB,QACnBC,YAAa,MACbC,YAAa3I,EAAaE,aAE5B,eAAgB,CACdgH,QAAS,OACTI,oBAAqB,gBAyBZK,gBAjBV,SAAC,GAA4B,IAA1BjD,EAAyB,EAAzBA,UAAWuH,EAAc,EAAdA,QACXrE,EAAUlB,KAEhB,OACE,kBAACqD,EAAA,EAAD,CACEC,QAAM,EACNlC,UAAWF,EAAQoE,KACnB/D,MAAO,CAAEf,QAAS+E,EAAU,QAAU,SAEtC,kBAAC7B,EAAA,EAAD,CAAatC,UAAWF,EAAQ,iBAC9B,kBAAC,GAAD,CAAqBlD,UAAWA,IAChC,kBAAC,GAAD,CAAgBA,UAAWA,SC9B7BgC,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXqF,SAAU,CACRlF,OAAQ,OACRD,MAAO,OACPG,QAAS,OACTM,WAAY,SACZ2E,eAAgB,iBAElBC,OAAQ,CACNpF,OAAQ,MACRD,MAAO,MACPmB,gBAAiB,cACjBY,OAAQ,QACRJ,YAAa,QACbC,YAAa3I,EAAaI,oBAsEjBuH,gBAjEa,WAC1B,IAAMC,EAAUlB,KAIRjC,EAFUoD,qBAAWtB,GAEME,gBAA3BhC,aALwB,EAOMsG,mBAAS,GAPf,mBAOzBsB,EAPyB,KAOZC,EAPY,KAyBhC,OACE,kBAAClB,GAAA,EAAD,CAAWtD,UAAWF,EAAQsE,UAC5B,kBAACxB,EAAA,EAAD,CACE5C,UAAWF,EAAQwE,OACnB7B,QAAQ,YACRpJ,MAAM,UACNgJ,QAAS,WAZXmC,EADED,GAAe,EACF,EAEAA,EAAc,KAM7B,QASA,kBAAC,GAAD,CACE3H,UAAWD,EAAajF,EAAWkD,YACnCuJ,QAAyB,IAAhBI,IAEX,kBAAC,GAAD,CACE3H,UAAWD,EAAajF,EAAWyD,eACnCgJ,QAAyB,IAAhBI,IAEX,kBAAC,GAAD,CACE3H,UAAWD,EAAajF,EAAWgE,eACnCyI,QAAyB,IAAhBI,IAEX,kBAAC,GAAD,CACE3H,UAAWD,EAAajF,EAAWkE,WACnCuI,QAAyB,IAAhBI,IAGX,kBAAC3B,EAAA,EAAD,CACE5C,UAAWF,EAAQwE,OACnB7B,QAAQ,YACRpJ,MAAM,UACNgJ,QAAS,WA9CXmC,EADED,GAAe,EACF,EAEAA,EAAc,KAwC7B,YCnFA3F,GAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXuB,KAAM,CACJrB,MAAO,OACPC,OAAQ,aAeCW,gBAVH,WACV,IAAMC,EAAUlB,KAEhB,OACE,kBAAC0E,GAAA,EAAD,CAAWtD,UAAWF,EAAQQ,MAC5B,kBAAC,GAAD,UCRcmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.96261293.chunk.js","sourcesContent":["import { ISortable } from \"./sortable\";\r\n\r\nexport enum Algorithms {\r\n  BubbleSort = \"bubbleSort\",\r\n  InsertionSort = \"insertionSort\",\r\n  SelectionSort = \"selectionSort\",\r\n  QuickSort = \"quickSort\"\r\n}\r\n\r\nexport interface IAnimation {\r\n  type: AnimationTypes;\r\n  index1: number;\r\n  index2: number;\r\n  element?: ISortable;\r\n}\r\n\r\nexport enum AnimationTypes {\r\n  Swap,\r\n  Comparison,\r\n  Move,\r\n  Set\r\n}\r\n","const clamp = (min: number, max: number, t: number) => {\r\n  return Math.max(max, Math.min(min, t));\r\n};\r\n\r\nconst randomNumber = (from: number, to: number) =>\r\n  Math.round(Math.random() * (to - from) + from);\r\n\r\nconst remap = (\r\n  minMaxIn: [number, number],\r\n  minMaxOut: [number, number],\r\n  value: number\r\n) =>  minMaxOut[0] + ((value - minMaxIn[0]) * (minMaxOut[1] - minMaxOut[0])) / (minMaxIn[1] - minMaxIn[0]);\r\n\r\nexport { clamp, randomNumber, remap };\r\n","import { colors } from \"@material-ui/core\";\r\n\r\nexport const customColors = {\r\n  primary: \"#3f51b5\",\r\n  primaryDark: \"#002984\",\r\n  primaryLight: \"#757de8\",\r\n  complementary: \"#ffc841\",\r\n  complementaryDark: \"#f9b713\",\r\n  complementaryLight: \"#ffdf90\",\r\n  secondary: \"#f44336\",\r\n  secondaryDark: \"#ba000d\",\r\n  secondaryLight: \"#ff7961\",\r\n  grey: colors.grey[400],\r\n  greyDark: colors.grey[600],\r\n  greyLight: colors.grey[200],\r\n};\r\n","import { clamp } from \"../common/utils/mathHelpers\";\r\nimport { customColors } from \"../styling/colors\";\r\nimport { observable } from \"mobx\";\r\n\r\nexport interface ISortable {\r\n  isGreaterThan(other: ISortable): boolean;\r\n  isLessThan(other: ISortable): boolean;\r\n  getValue(): number;\r\n  getColor(): string;\r\n  color: string;\r\n  toString(): string;\r\n}\r\n\r\nexport class SortableNumber implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = value;\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return this.color;\r\n  }\r\n  @observable color = customColors.primary;\r\n\r\n  toString() {\r\n    return this.value.toString();\r\n  }\r\n}\r\n\r\nexport class SortableColor implements ISortable {\r\n  value: number;\r\n\r\n  constructor(value: number) {\r\n    this.value = clamp(0, 360, value);\r\n  }\r\n\r\n  isGreaterThan(other: ISortable) {\r\n    return this.getValue() > other.getValue();\r\n  }\r\n\r\n  isLessThan(other: ISortable) {\r\n    return this.getValue() < other.getValue();\r\n  }\r\n\r\n  getValue() {\r\n    return this.value;\r\n  }\r\n\r\n  getColor() {\r\n    return `hsl(${this.getValue()}, 100%, 50%)`;\r\n  }\r\n  color = \"0\";\r\n  toString() {\r\n    return `hsl(${this.value.toString()}, 100%, 50%)`;\r\n  }\r\n}\r\n","import { ISortable, SortableNumber } from \"../../models/sortable\";\r\nimport { randomNumber } from \"./mathHelpers\";\r\n\r\nfunction swap(array: any[], index1: number, index2: number) {\r\n  let tmp = array[index1];\r\n  array[index1] = array[index2];\r\n  array[index2] = tmp;\r\n}\r\n\r\nfunction shuffle<T>(array: T[]): T[] {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nconst generateSortableNumbers = (\r\n  from: number,\r\n  to: number,\r\n  count: number\r\n): ISortable[] => {\r\n  let array: ISortable[] = [];\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    array.push(new SortableNumber(randomNumber(from, to)));\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst generateSteadySortableNumbers = (count: number): ISortable[] => {\r\n  let array: ISortable[] = [];\r\n\r\n  for (let i = 1; i <= count; i++) {\r\n    array.push(new SortableNumber(i));\r\n  }\r\n\r\n  return shuffle(array);\r\n};\r\n\r\nexport {\r\n  swap,\r\n  shuffle,\r\n  generateSortableNumbers,\r\n  generateSteadySortableNumbers\r\n};\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { swap } from \"../app/common/utils/arrayHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Bubble Sort\",\r\n  class: \"Comparison sort\",\r\n  description: `Bubble sort, sometimes referred to as sinking sort,\r\n                is a simple sorting algorithm that repeatedly steps\r\n                through the list, compares adjacent elements and swaps\r\n                them if they are in the wrong order. The pass through\r\n                the list is repeated until the list is sorted.`,\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass BubbleSort implements ISortingAlgorithm {\r\n  type = Algorithms.BubbleSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      for (let j = 0; j < array.length - 1 - i; j++) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: j,\r\n          index2: j + 1\r\n        });\r\n\r\n        if (array[j].isGreaterThan(array[j + 1])) {\r\n\r\n          swap(array, j, j + 1);\r\n\r\n          animations.push({\r\n            type: AnimationTypes.Swap,\r\n            index1: j,\r\n            index2: j + 1\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default BubbleSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../app/models/visualizerOptions\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Insertion sort\",\r\n  class: \"Comparison sort\",\r\n  description: \"\",\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass InsertionSort implements ISortingAlgorithm {\r\n  type = Algorithms.InsertionSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 1; i < array.length; i++) {\r\n      let key = array[i];\r\n      let leftElementIndex = i - 1;\r\n\r\n      while (leftElementIndex >= 0 && key.isLessThan(array[leftElementIndex])) {\r\n        array[leftElementIndex + 1] = array[leftElementIndex];\r\n\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: leftElementIndex,\r\n          index2: leftElementIndex + 1\r\n        });\r\n\r\n        animations.push({\r\n          type: AnimationTypes.Move,\r\n          index1: leftElementIndex,\r\n          index2: leftElementIndex + 1\r\n        });\r\n\r\n        leftElementIndex--;\r\n      }\r\n\r\n      array[leftElementIndex + 1] = key;\r\n\r\n      animations.push({\r\n        type: AnimationTypes.Set,\r\n        index1: leftElementIndex + 1,\r\n        index2: leftElementIndex + 1,\r\n        element: key\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default InsertionSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Selection Sort\",\r\n  class: \"Comparison sort\",\r\n  description: \"\",\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass SelectionSort implements ISortingAlgorithm {\r\n  type = Algorithms.SelectionSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n      let smallestIndex = i;\r\n      for (let j = i + 1; j < array.length; j++) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: i,\r\n          index2: j\r\n        });\r\n\r\n        if (array[j].isLessThan(array[smallestIndex])) {\r\n          smallestIndex = j;\r\n        }\r\n      }\r\n\r\n      let tmp = array[i];\r\n      array[i] = array[smallestIndex];\r\n      array[smallestIndex] = tmp;\r\n\r\n      animations.push({\r\n        type: AnimationTypes.Swap,\r\n        index1: i,\r\n        index2: smallestIndex\r\n      });\r\n    }\r\n\r\n    return animations;\r\n  }\r\n}\r\n\r\nexport default SelectionSort;\r\n","import {\r\n  ISortingAlgorithm,\r\n  IAlgorithmData\r\n} from \"../app/models/sortingAlgorithm\";\r\nimport { ISortable } from \"../app/models/sortable\";\r\nimport {\r\n  Algorithms,\r\n  AnimationTypes,\r\n  IAnimation\r\n} from \"../app/models/visualizerOptions\";\r\nimport { swap } from \"../app/common/utils/arrayHelpers\";\r\n\r\nconst data: IAlgorithmData = {\r\n  title: \"Quick Sort\",\r\n  class: \"Comparison sort\",\r\n  description: \"\",\r\n  timeComplexity: \"n^2\",\r\n  spaceComplexity: \"1\"\r\n};\r\n\r\nclass QuickSort implements ISortingAlgorithm {\r\n  type = Algorithms.QuickSort;\r\n  data = data;\r\n\r\n  sort(array: ISortable[]) {\r\n    array = array.slice();\r\n    var animations: IAnimation[] = [];\r\n\r\n    return this.quickSort(array, 0, array.length - 1, animations);\r\n  }\r\n\r\n  quickSort(\r\n    array: ISortable[],\r\n    leftPointer: number,\r\n    rightPointer: number,\r\n    animations: IAnimation[]\r\n  ) {\r\n    var index;\r\n\r\n    if (array.length > 1) {\r\n      index = this.partition(array, leftPointer, rightPointer, animations);\r\n\r\n      if (leftPointer < index - 1) {\r\n        this.quickSort(array, leftPointer, index - 1, animations);\r\n      }\r\n\r\n      if (rightPointer > index) {\r\n        this.quickSort(array, index, rightPointer, animations);\r\n      }\r\n    }\r\n\r\n    return animations;\r\n  }\r\n\r\n  partition(\r\n    array: ISortable[],\r\n    leftPointer: number,\r\n    rightPointer: number,\r\n    animations: IAnimation[]\r\n  ) {\r\n    let pivotIndex = Math.floor((leftPointer + rightPointer) / 2);\r\n    let pivot = array[pivotIndex];\r\n\r\n    while (leftPointer <= rightPointer) {\r\n      while (array[leftPointer].isLessThan(pivot)) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: leftPointer,\r\n          index2: pivotIndex\r\n        });\r\n\r\n        leftPointer++;\r\n      }\r\n\r\n      while (array[rightPointer].isGreaterThan(pivot)) {\r\n        animations.push({\r\n          type: AnimationTypes.Comparison,\r\n          index1: rightPointer,\r\n          index2: pivotIndex\r\n        });\r\n\r\n        rightPointer--;\r\n      }\r\n\r\n      if (leftPointer <= rightPointer) {\r\n        animations.push({\r\n          type: AnimationTypes.Swap,\r\n          index1: leftPointer,\r\n          index2: rightPointer\r\n        });\r\n\r\n        swap(array, leftPointer, rightPointer);\r\n        leftPointer++;\r\n        rightPointer--;\r\n      }\r\n    }\r\n\r\n    return leftPointer;\r\n  }\r\n}\r\n\r\nexport default QuickSort;\r\n","import { RootStore } from \"./rootStore\";\r\nimport { IStore } from \"./store\";\r\nimport { ISortable, SortableNumber } from \"../models/sortable\";\r\nimport { action, observable } from \"mobx\";\r\nimport { ISortingAlgorithm } from \"../models/sortingAlgorithm\";\r\nimport BubbleSort from \"../../algorithms/bubbleSort\";\r\nimport InsertionSort from \"../../algorithms/insertionSort\";\r\nimport {\r\n  Algorithms,\r\n  IAnimation,\r\n  AnimationTypes\r\n} from \"../models/visualizerOptions\";\r\nimport {\r\n  generateSortableNumbers,\r\n  generateSteadySortableNumbers\r\n} from \"../common/utils/arrayHelpers\";\r\nimport { customColors } from \"../styling/colors\";\r\nimport SelectionSort from \"../../algorithms/selectionSort\";\r\nimport QuickSort from \"../../algorithms/quickSort\";\r\n\r\nexport default class VisualizerStore implements IStore {\r\n  rootStore: RootStore;\r\n\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    this.initAlgorithms();\r\n  }\r\n\r\n  elementsCount = 100;\r\n  animationSpeed = 10;\r\n\r\n  algorithmsMap = new Map<Algorithms, ISortingAlgorithm>();\r\n  @observable arraysMap = new Map<Algorithms, ISortable[]>();\r\n  animationsMap = new Map<Algorithms, IAnimation[]>();\r\n  @observable animatingMap = new Map<Algorithms, boolean>();\r\n\r\n  @action initAlgorithms = () => {\r\n    this.algorithmsMap.set(Algorithms.BubbleSort, new BubbleSort());\r\n    this.algorithmsMap.set(Algorithms.InsertionSort, new InsertionSort());\r\n    this.algorithmsMap.set(Algorithms.SelectionSort, new SelectionSort());\r\n    this.algorithmsMap.set(Algorithms.QuickSort, new QuickSort());\r\n\r\n    this.algorithmsMap.forEach(x =>\r\n      this.arraysMap.set(\r\n        x.type,\r\n        generateSortableNumbers(1, 100, this.elementsCount)\r\n      )\r\n    );\r\n  };\r\n\r\n  @action triggerSorting = (algorithm: Algorithms) => {\r\n    this.triggerIsAnimating(algorithm);\r\n\r\n    let animations = this.getAnimations(algorithm);\r\n    let noAnimations = false;\r\n\r\n    if (animations !== undefined) {\r\n      noAnimations = animations.length === 0;\r\n    }\r\n\r\n    if (noAnimations) {\r\n      let sortingAlgorithm = this.getAlgorithm(algorithm);\r\n      let array = this.getArray(algorithm);\r\n      let animations = this.setAnimations(\r\n        algorithm,\r\n        sortingAlgorithm\r\n          .sort(array)\r\n      );\r\n\r\n      var interval = setInterval(() => {\r\n        if (this.isAnimating(algorithm)) {\r\n          let animation = animations.shift();\r\n          if (animation) {\r\n            this.animate(animation, array);\r\n          } else {\r\n            this.triggerIsAnimating(algorithm);\r\n            clearInterval(interval);\r\n          }\r\n        }\r\n      }, this.animationSpeed);\r\n    }\r\n  };\r\n\r\n  @action animate(animation: IAnimation, array: ISortable[]) {\r\n    array.forEach(x => (x.color = customColors.primary));\r\n    switch (animation.type) {\r\n      case AnimationTypes.Comparison:\r\n        array[animation.index1].color = customColors.complementaryDark;\r\n        array[animation.index2].color = customColors.complementaryDark;\r\n        break;\r\n      case AnimationTypes.Swap:\r\n        let tmp = array[animation.index1];\r\n        array[animation.index1] = array[animation.index2];\r\n        array[animation.index1].color = customColors.secondaryDark;\r\n        array[animation.index2] = tmp;\r\n        array[animation.index2].color = customColors.secondaryDark;\r\n        break;\r\n      case AnimationTypes.Move:\r\n        array[animation.index2] = array[animation.index1];\r\n        array[animation.index2].color = customColors.secondary;\r\n        break;\r\n      case AnimationTypes.Set:\r\n        if (animation.element) {\r\n          array[animation.index2] = animation.element;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  @action getRandomArray = (algorithm: Algorithms) => {\r\n    this.resetArray(algorithm);\r\n\r\n    this.setArray(\r\n      algorithm,\r\n      generateSortableNumbers(0, 100, this.elementsCount)\r\n    );\r\n  };\r\n\r\n  @action getSteadyArray = (algorithm: Algorithms) => {\r\n    this.resetArray(algorithm);\r\n\r\n    this.setArray(algorithm, generateSteadySortableNumbers(this.elementsCount));\r\n  };\r\n\r\n  @action getReversedArray = (algorithm: Algorithms) => {\r\n    this.resetArray(algorithm);\r\n\r\n    let array: ISortable[] = [];\r\n    for (let i = 1; i <= this.elementsCount; i++) {\r\n      array.unshift(new SortableNumber(i));\r\n    }\r\n\r\n    this.setArray(algorithm, array);\r\n  };\r\n\r\n  @action resetArray(algorithm: Algorithms) {\r\n    this.setAnimations(algorithm, []);\r\n    if (this.isAnimating(algorithm)) this.triggerIsAnimating(algorithm);\r\n  }\r\n\r\n  getAlgorithm = (algorithm: Algorithms): ISortingAlgorithm => {\r\n    return this.algorithmsMap.get(algorithm) ?? new BubbleSort();\r\n  };\r\n\r\n  getArray = (algorithm: Algorithms): ISortable[] => {\r\n    return this.arraysMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  @action setArray = (algorithm: Algorithms, array: ISortable[]) => {\r\n    this.arraysMap.set(algorithm, array);\r\n  };\r\n\r\n  getAnimations = (algorithm: Algorithms): IAnimation[] => {\r\n    return this.animationsMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  setAnimations = (\r\n    algorithm: Algorithms,\r\n    animations: IAnimation[]\r\n  ): IAnimation[] => {\r\n    this.animationsMap.set(algorithm, animations);\r\n    return this.animationsMap.get(algorithm) ?? [];\r\n  };\r\n\r\n  isAnimating = (algorithm: Algorithms): boolean => {\r\n    return this.animatingMap.get(algorithm) ?? false;\r\n  };\r\n\r\n  @action triggerIsAnimating = (algorithm: Algorithms) => {\r\n    this.animatingMap.set(algorithm, !this.isAnimating(algorithm));\r\n  };\r\n}\r\n","import { createContext } from \"react\";\r\nimport { configure } from \"mobx\";\r\nimport { IStore } from \"./store\";\r\nimport VisualizerStore from \"./visualizerStore\";\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore implements IStore {\r\n  visualizerStore: VisualizerStore;\r\n\r\n  constructor() {\r\n    this.visualizerStore = new VisualizerStore(this);\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    visualizer: {\r\n      width: \"100%\",\r\n      height: \"100%\"\r\n    },\r\n    vertical: {\r\n      display: \"grid\",\r\n      gridTemplateRows: \"repeat(100, minmax(1px, 1fr))\",\r\n      rowGap: \"1px\"\r\n    },\r\n    horizontal: {\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"repeat(100, minmax(1px, 1fr))\",\r\n      columnGap: \"1px\",\r\n      alignItems: \"flex-end\"\r\n    },\r\n    bar: {\r\n      display: \"flex\",\r\n      height: \"100%\",\r\n      borderRadius: \"0 2px 2px 0\"\r\n    }\r\n  })\r\n);\r\n\r\nconst Visualizer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { getArray } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <div className={[classes.visualizer, classes.vertical].join(\" \")}>\r\n      {getArray(algorithm.type).map((element, index) => {\r\n        return (\r\n          <div key={index} className={classes.bar}>\r\n            <div\r\n              style={{\r\n                width: `${element.getValue()}%`,\r\n                backgroundColor: `${element.getColor()}`\r\n              }}\r\n            ></div>\r\n            <div\r\n              style={{\r\n                width: `${100 - element.getValue()}%`,\r\n                backgroundColor: `${customColors.grey}`\r\n              }}\r\n            ></div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Visualizer);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useContext } from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport Visualizer from \"./Visualizer\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Card,\r\n  ButtonGroup,\r\n  Button,\r\n  CardActionArea,\r\n  CardContent\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      overflow: \"visible\",\r\n      height: \"30em\",\r\n      position: \"relative\",\r\n      right: \"2.5em\",\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"2px\",\r\n      borderColor: customColors.primaryDark\r\n    },\r\n    actionArea: {\r\n      flexBasis: \"90%\",\r\n      border: \"dashed\",\r\n      borderWidth: \"3px\",\r\n      borderColor: customColors.primaryLight,\r\n      \"&:hover\": {\r\n        border: \"solid\",\r\n        background: customColors.grey,\r\n        borderColor: customColors.primary,\r\n        borderWidth: \"3px\"\r\n      }\r\n    },\r\n    content: {\r\n      height: \"100%\",\r\n      boxSizing: \"border-box\",\r\n      padding: 0\r\n    },\r\n    buttons: {\r\n      flexBasis: \"10%\"\r\n    },\r\n    icon: {\r\n      zIndex: 1,\r\n      position: \"absolute\",\r\n      left: \"50%\",\r\n      marginLeft: \"-25%\",\r\n      top: \"50%\",\r\n      marginTop: \"-25%\",\r\n      width: \"5em\",\r\n      height: \"5em\",\r\n      color: \"white\",\r\n      \"&:hover\": {\r\n        transform: \"scale(1.02)\"\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerContainer: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const {\r\n    getRandomArray,\r\n    getSteadyArray,\r\n    getReversedArray,\r\n    triggerSorting,\r\n    isAnimating\r\n  } = rootStore.visualizerStore;\r\n\r\n  return (\r\n    <Card raised className={classes.root}>\r\n      <CardActionArea\r\n        id=\"visualizerArea\"\r\n        className={classes.actionArea}\r\n        onClick={() => triggerSorting(algorithm.type)}\r\n      >\r\n        {isAnimating(algorithm.type) ? ( \r\n          <PauseCircleOutlineIcon id=\"pauseIcon\" className={classes.icon} />\r\n        ) : (\r\n          <PlayCircleOutlineIcon id=\"playIcon\" className={classes.icon} />\r\n        )}\r\n\r\n        <CardContent className={classes.content}>\r\n          <Visualizer algorithm={algorithm} />\r\n        </CardContent>\r\n      </CardActionArea>\r\n\r\n      <ButtonGroup\r\n        className={classes.buttons}\r\n        size=\"large\"\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        aria-label=\"contained primary button group\"\r\n        fullWidth\r\n      >\r\n        <Button onClick={() => getRandomArray(algorithm.type)}>Rand</Button>\r\n        <Button onClick={() => getSteadyArray(algorithm.type)}>Uni</Button>\r\n        <Button onClick={() => getReversedArray(algorithm.type)}>Rev</Button>\r\n        <Button>Four</Button>\r\n      </ButtonGroup>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerContainer);\r\n","import React, { useState } from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport {\r\n  ButtonGroup,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Paper\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    tabs: {\r\n      marginTop: \"4em\",\r\n      marginRight: \"1.5em\",\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"2px\",\r\n      borderColor: customColors.primaryDark\r\n    },\r\n    tabContent: {\r\n      padding: \"1em\"\r\n    }\r\n  })\r\n);\r\n\r\nconst InfoTabs: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const [currentTab, setCurrentTab] = useState(1);\r\n\r\n  return (\r\n    <Paper className={classes.tabs} elevation={5}>\r\n      <ButtonGroup\r\n        size=\"large\"\r\n        variant=\"text\"\r\n        color=\"primary\"\r\n        aria-label=\"contained primary button group\"\r\n        fullWidth\r\n      >\r\n        <Button\r\n          onClick={() => setCurrentTab(1)}\r\n          variant={currentTab === 1 ? \"contained\" : \"text\"}\r\n        >\r\n          Rand\r\n        </Button>\r\n        <Button\r\n          onClick={() => setCurrentTab(2)}\r\n          variant={currentTab === 2 ? \"contained\" : \"text\"}\r\n        >\r\n          Uni\r\n        </Button>\r\n        <Button\r\n          onClick={() => setCurrentTab(3)}\r\n          variant={currentTab === 3 ? \"contained\" : \"text\"}\r\n        >\r\n          Rev\r\n        </Button>\r\n        <Button\r\n          onClick={() => setCurrentTab(4)}\r\n          variant={currentTab === 4 ? \"contained\" : \"text\"}\r\n        >\r\n          Four\r\n        </Button>\r\n      </ButtonGroup>\r\n\r\n      <Container\r\n        className={classes.tabContent}\r\n        style={{ display: currentTab === 1 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"body2\">{algorithm.data.description}</Typography>\r\n      </Container>\r\n      <Container\r\n        className={classes.tabContent}\r\n        style={{ display: currentTab === 2 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"body2\">111</Typography>\r\n      </Container>\r\n      <Container\r\n        className={classes.tabContent}\r\n        style={{ display: currentTab === 3 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"body2\">222</Typography>\r\n      </Container>\r\n      <Container\r\n        className={classes.tabContent}\r\n        style={{ display: currentTab === 4 ? \"block\" : \"none\" }}\r\n      >\r\n        <Typography variant=\"body2\">333</Typography>\r\n      </Container>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default InfoTabs;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport InfoTabs from \"./InfoTabs\";\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Box,\r\n  Typography,\r\n  Chip,\r\n  Tooltip,\r\n  Divider\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    tags: {\r\n      marginTop: \"1em\",\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      \"& > *\": {\r\n        margin: theme.spacing(0.5)\r\n      }\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerInfo: React.FC<{ algorithm: ISortingAlgorithm }> = ({\r\n  algorithm\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h2\">{algorithm.data.title}</Typography>\r\n      <Divider variant=\"fullWidth\" />\r\n      <div className={classes.tags}>\r\n        <Tooltip title=\"Link?\" interactive>\r\n          <Chip\r\n            label={\"Θ(\" + algorithm.data.timeComplexity + \")\"}\r\n            color=\"primary\"\r\n          />\r\n        </Tooltip>\r\n\r\n        <Chip\r\n          label={\"O(\" + algorithm.data.spaceComplexity + \")\"}\r\n          color=\"primary\"\r\n        />\r\n      </div>\r\n      <InfoTabs algorithm={algorithm} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerInfo);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { ISortingAlgorithm } from \"../app/models/sortingAlgorithm\";\r\nimport VisualizerContainer from \"./VisualizerContainer\";\r\nimport VisualizerInfo from \"./VisualizerInfo\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  createStyles,\r\n  Theme\r\n} from \"@material-ui/core\";\r\nimport { customColors } from \"../app/styling/colors\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    card: {\r\n      margin: \"auto\",\r\n      width: \"70%\",\r\n      overflow: \"visible\",\r\n      backgroundColor: customColors.greyLight,\r\n      borderBottomStyle: \"solid\",\r\n      borderWidth: \"3px\",\r\n      borderColor: customColors.primaryDark\r\n    },\r\n    \"card-content\": {\r\n      display: \"grid\",\r\n      gridTemplateColumns: \"1fr 2fr\"\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizerCard: React.FC<{\r\n  algorithm: ISortingAlgorithm;\r\n  visible: boolean;\r\n}> = ({ algorithm, visible }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      raised\r\n      className={classes.card}\r\n      style={{ display: visible ? \"block\" : \"none\" }}\r\n    >\r\n      <CardContent className={classes[\"card-content\"]}>\r\n        <VisualizerContainer algorithm={algorithm} />\r\n        <VisualizerInfo algorithm={algorithm} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizerCard);\r\n","import React, { useContext, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RootStoreContext } from \"../app/stores/rootStore\";\r\nimport VisualizerCard from \"./VisualizerCard\";\r\nimport {\r\n  Container,\r\n  Button,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles\r\n} from \"@material-ui/core\"; //maaaaaaaau\r\nimport { customColors } from \"../app/styling/colors\";\r\nimport { Algorithms } from \"../app/models/visualizerOptions\";\r\n//tut potsemu to net kotika a vernee pusisti\r\n//if sirlja kotik import kotik to Tartu from TALLINN\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    carousel: {\r\n      height: \"100%\",\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\"\r\n    },\r\n    button: {\r\n      height: \"6em\",\r\n      width: \"4em\",\r\n      backgroundColor: \"transparent\",\r\n      border: \"solid\",\r\n      borderWidth: \"0.2em\",\r\n      borderColor: customColors.complementary\r\n    }\r\n  })\r\n);\r\n\r\nconst VisualizersCarousel = () => {\r\n  const classes = useStyles();\r\n\r\n  const rootStore = useContext(RootStoreContext);\r\n\r\n  const { getAlgorithm } = rootStore.visualizerStore;\r\n\r\n  const [currentCard, setCurrentCard] = useState(1);\r\n\r\n  const nextSlide = () => {\r\n    if (currentCard >= 4) {\r\n      setCurrentCard(1);\r\n    } else {\r\n      setCurrentCard(currentCard + 1);\r\n    }\r\n  };\r\n\r\n  const prevSlide = () => {\r\n    if (currentCard <= 1) {\r\n      setCurrentCard(4);\r\n    } else {\r\n      setCurrentCard(currentCard - 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container className={classes.carousel}>\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => prevSlide()}\r\n      >\r\n        Back\r\n      </Button>\r\n\r\n      <VisualizerCard\r\n        algorithm={getAlgorithm(Algorithms.BubbleSort)}\r\n        visible={currentCard === 1}\r\n      />\r\n      <VisualizerCard\r\n        algorithm={getAlgorithm(Algorithms.InsertionSort)}\r\n        visible={currentCard === 2}\r\n      />\r\n      <VisualizerCard\r\n        algorithm={getAlgorithm(Algorithms.SelectionSort)}\r\n        visible={currentCard === 3}\r\n      />\r\n      <VisualizerCard\r\n        algorithm={getAlgorithm(Algorithms.QuickSort)}\r\n        visible={currentCard === 4}\r\n      />\r\n\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => nextSlide()}\r\n      >\r\n        Next\r\n      </Button>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(VisualizersCarousel);\r\n","import React from \"react\";\nimport VisualizersCarousel from \"../../features/VisualizersCarousel\";\nimport { observer } from \"mobx-react-lite\";\nimport Container from \"@material-ui/core/Container\";\nimport { Theme, makeStyles, createStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"100%\",\n      height: \"100%\"\n    }\n  })\n);\n\nconst App = () => {\n  const classes = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <VisualizersCarousel />\n    </Container>\n  );\n};\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./app/styling/styles.scss\";\nimport App from \"./app/layout/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}